// This file is auto-generated by @hey-api/openapi-ts

import { type Options, changePassword, disable2Fa, enable2Fa, login, logout, register, requestPasswordReset, resetPassword, listSessions, revokeAllSessions, revokeSession, extendSession, setup2Fa, verifyEmail, getConfig, identifyContact, createTicketContact, getTicketContact, listMessagesContact, postMessageContact, listOrgs, createOrg, getOrg, listMembers, addMember, removeMember, listTickets, createTicket, getTicket, updateTicket, listMessages, postMessage, listTags, addTag, removeTag, listWatchers, addWatcher, removeWatcher } from '../sdk.gen';
import { queryOptions, type MutationOptions, type DefaultError, infiniteQueryOptions, type InfiniteData } from '@tanstack/svelte-query';
import type { ChangePasswordData, ChangePasswordError, Disable2FaData, Disable2FaError, Enable2FaData, Enable2FaError, LoginData, LoginError, LoginResponse, LogoutData, LogoutError, RegisterData, RegisterError, RegisterResponse, RequestPasswordResetData, RequestPasswordResetError, ResetPasswordData, ResetPasswordError, ListSessionsData, RevokeAllSessionsData, RevokeSessionData, ExtendSessionData, Setup2FaData, Setup2FaError, Setup2FaResponse2, VerifyEmailData, VerifyEmailError, GetConfigData, IdentifyContactData, IdentifyContactResponse2, CreateTicketContactData, CreateTicketContactResponse, GetTicketContactData, ListMessagesContactData, PostMessageContactData, PostMessageContactResponse, ListOrgsData, CreateOrgData, CreateOrgResponse, GetOrgData, ListMembersData, AddMemberData, RemoveMemberData, ListTicketsData, ListTicketsResponse, CreateTicketData, CreateTicketError, CreateTicketResponse, GetTicketData, UpdateTicketData, UpdateTicketError, UpdateTicketResponse, ListMessagesData, PostMessageData, PostMessageError, PostMessageResponse, ListTagsData, AddTagData, AddTagError, RemoveTagData, ListWatchersData, AddWatcherData, RemoveWatcherData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const changePasswordQueryKey = (options: Options<ChangePasswordData>) => createQueryKey('changePassword', options);

/**
 * Change password
 * Change password for the current user.
 */
export const changePasswordOptions = (options: Options<ChangePasswordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await changePassword({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: changePasswordQueryKey(options)
    });
};

/**
 * Change password
 * Change password for the current user.
 */
export const changePasswordMutation = (options?: Partial<Options<ChangePasswordData>>): MutationOptions<unknown, ChangePasswordError, Options<ChangePasswordData>> => {
    const mutationOptions: MutationOptions<unknown, ChangePasswordError, Options<ChangePasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await changePassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const disable2FaQueryKey = (options: Options<Disable2FaData>) => createQueryKey('disable2Fa', options);

/**
 * Disable 2FA
 * Disable 2FA for the user.
 */
export const disable2FaOptions = (options: Options<Disable2FaData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await disable2Fa({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: disable2FaQueryKey(options)
    });
};

/**
 * Disable 2FA
 * Disable 2FA for the user.
 */
export const disable2FaMutation = (options?: Partial<Options<Disable2FaData>>): MutationOptions<unknown, Disable2FaError, Options<Disable2FaData>> => {
    const mutationOptions: MutationOptions<unknown, Disable2FaError, Options<Disable2FaData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await disable2Fa({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const enable2FaQueryKey = (options: Options<Enable2FaData>) => createQueryKey('enable2Fa', options);

/**
 * Enable 2FA
 * Confirm TOTP code to enable 2FA for the user.
 */
export const enable2FaOptions = (options: Options<Enable2FaData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await enable2Fa({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: enable2FaQueryKey(options)
    });
};

/**
 * Enable 2FA
 * Confirm TOTP code to enable 2FA for the user.
 */
export const enable2FaMutation = (options?: Partial<Options<Enable2FaData>>): MutationOptions<unknown, Enable2FaError, Options<Enable2FaData>> => {
    const mutationOptions: MutationOptions<unknown, Enable2FaError, Options<Enable2FaData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await enable2Fa({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const loginQueryKey = (options: Options<LoginData>) => createQueryKey('login', options);

/**
 * Agent login
 * Authenticate an agent by email/password. If 2FA is enabled, include a valid `totp_code`. Returns a new session token.
 */
export const loginOptions = (options: Options<LoginData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await login({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: loginQueryKey(options)
    });
};

/**
 * Agent login
 * Authenticate an agent by email/password. If 2FA is enabled, include a valid `totp_code`. Returns a new session token.
 */
export const loginMutation = (options?: Partial<Options<LoginData>>): MutationOptions<LoginResponse, LoginError, Options<LoginData>> => {
    const mutationOptions: MutationOptions<LoginResponse, LoginError, Options<LoginData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await login({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const logoutQueryKey = (options?: Options<LogoutData>) => createQueryKey('logout', options);

/**
 * Logout
 * Revoke the current session token. Requires `Authorization: Bearer <token>`.
 */
export const logoutOptions = (options?: Options<LogoutData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await logout({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: logoutQueryKey(options)
    });
};

/**
 * Logout
 * Revoke the current session token. Requires `Authorization: Bearer <token>`.
 */
export const logoutMutation = (options?: Partial<Options<LogoutData>>): MutationOptions<unknown, LogoutError, Options<LogoutData>> => {
    const mutationOptions: MutationOptions<unknown, LogoutError, Options<LogoutData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await logout({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const registerQueryKey = (options: Options<RegisterData>) => createQueryKey('register', options);

/**
 * Agent registration
 * Create a new agent account and start a session. Also issues an email verification token.
 */
export const registerOptions = (options: Options<RegisterData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await register({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: registerQueryKey(options)
    });
};

/**
 * Agent registration
 * Create a new agent account and start a session. Also issues an email verification token.
 */
export const registerMutation = (options?: Partial<Options<RegisterData>>): MutationOptions<RegisterResponse, RegisterError, Options<RegisterData>> => {
    const mutationOptions: MutationOptions<RegisterResponse, RegisterError, Options<RegisterData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await register({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const requestPasswordResetQueryKey = (options: Options<RequestPasswordResetData>) => createQueryKey('requestPasswordReset', options);

/**
 * Request password reset
 * Create a one-time password reset token and deliver it via email.
 */
export const requestPasswordResetOptions = (options: Options<RequestPasswordResetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await requestPasswordReset({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: requestPasswordResetQueryKey(options)
    });
};

/**
 * Request password reset
 * Create a one-time password reset token and deliver it via email.
 */
export const requestPasswordResetMutation = (options?: Partial<Options<RequestPasswordResetData>>): MutationOptions<unknown, RequestPasswordResetError, Options<RequestPasswordResetData>> => {
    const mutationOptions: MutationOptions<unknown, RequestPasswordResetError, Options<RequestPasswordResetData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await requestPasswordReset({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const resetPasswordQueryKey = (options: Options<ResetPasswordData>) => createQueryKey('resetPassword', options);

/**
 * Reset password
 * Reset password using a one-time token.
 */
export const resetPasswordOptions = (options: Options<ResetPasswordData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await resetPassword({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: resetPasswordQueryKey(options)
    });
};

/**
 * Reset password
 * Reset password using a one-time token.
 */
export const resetPasswordMutation = (options?: Partial<Options<ResetPasswordData>>): MutationOptions<unknown, ResetPasswordError, Options<ResetPasswordData>> => {
    const mutationOptions: MutationOptions<unknown, ResetPasswordError, Options<ResetPasswordData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await resetPassword({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listSessionsQueryKey = (options?: Options<ListSessionsData>) => createQueryKey('listSessions', options);

/**
 * List sessions
 * List active sessions for the current user.
 */
export const listSessionsOptions = (options?: Options<ListSessionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSessions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSessionsQueryKey(options)
    });
};

export const revokeAllSessionsQueryKey = (options?: Options<RevokeAllSessionsData>) => createQueryKey('revokeAllSessions', options);

/**
 * Revoke all sessions
 * Revoke all active sessions for the current user.
 */
export const revokeAllSessionsOptions = (options?: Options<RevokeAllSessionsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await revokeAllSessions({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: revokeAllSessionsQueryKey(options)
    });
};

/**
 * Revoke all sessions
 * Revoke all active sessions for the current user.
 */
export const revokeAllSessionsMutation = (options?: Partial<Options<RevokeAllSessionsData>>): MutationOptions<unknown, DefaultError, Options<RevokeAllSessionsData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<RevokeAllSessionsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await revokeAllSessions({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Revoke a session
 * Revoke an active session (owner only).
 */
export const revokeSessionMutation = (options?: Partial<Options<RevokeSessionData>>): MutationOptions<unknown, DefaultError, Options<RevokeSessionData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<RevokeSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await revokeSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const extendSessionQueryKey = (options: Options<ExtendSessionData>) => createQueryKey('extendSession', options);

/**
 * Extend a session
 * Extend the session expiration by a number of days (owner only).
 */
export const extendSessionOptions = (options: Options<ExtendSessionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await extendSession({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: extendSessionQueryKey(options)
    });
};

/**
 * Extend a session
 * Extend the session expiration by a number of days (owner only).
 */
export const extendSessionMutation = (options?: Partial<Options<ExtendSessionData>>): MutationOptions<unknown, DefaultError, Options<ExtendSessionData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<ExtendSessionData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await extendSession({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const setup2FaQueryKey = (options: Options<Setup2FaData>) => createQueryKey('setup2Fa', options);

/**
 * Setup 2FA (TOTP)
 * Generate a TOTP secret and provisioning URI (otpauth://). Requires an authenticated agent context.
 */
export const setup2FaOptions = (options: Options<Setup2FaData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await setup2Fa({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: setup2FaQueryKey(options)
    });
};

/**
 * Setup 2FA (TOTP)
 * Generate a TOTP secret and provisioning URI (otpauth://). Requires an authenticated agent context.
 */
export const setup2FaMutation = (options?: Partial<Options<Setup2FaData>>): MutationOptions<Setup2FaResponse2, Setup2FaError, Options<Setup2FaData>> => {
    const mutationOptions: MutationOptions<Setup2FaResponse2, Setup2FaError, Options<Setup2FaData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await setup2Fa({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const verifyEmailQueryKey = (options: Options<VerifyEmailData>) => createQueryKey('verifyEmail', options);

/**
 * Verify email
 * Verify an email address using a verification token.
 */
export const verifyEmailOptions = (options: Options<VerifyEmailData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await verifyEmail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: verifyEmailQueryKey(options)
    });
};

/**
 * Verify email
 * Verify an email address using a verification token.
 */
export const verifyEmailMutation = (options?: Partial<Options<VerifyEmailData>>): MutationOptions<unknown, VerifyEmailError, Options<VerifyEmailData>> => {
    const mutationOptions: MutationOptions<unknown, VerifyEmailError, Options<VerifyEmailData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await verifyEmail({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getConfigQueryKey = (options?: Options<GetConfigData>) => createQueryKey('getConfig', options);

/**
 * Public client config
 */
export const getConfigOptions = (options?: Options<GetConfigData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getConfig({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getConfigQueryKey(options)
    });
};

export const identifyContactQueryKey = (options: Options<IdentifyContactData>) => createQueryKey('identifyContact', options);

/**
 * Identify or create contact and issue token
 */
export const identifyContactOptions = (options: Options<IdentifyContactData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await identifyContact({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: identifyContactQueryKey(options)
    });
};

/**
 * Identify or create contact and issue token
 */
export const identifyContactMutation = (options?: Partial<Options<IdentifyContactData>>): MutationOptions<IdentifyContactResponse2, DefaultError, Options<IdentifyContactData>> => {
    const mutationOptions: MutationOptions<IdentifyContactResponse2, DefaultError, Options<IdentifyContactData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await identifyContact({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const createTicketContactQueryKey = (options: Options<CreateTicketContactData>) => createQueryKey('createTicketContact', options);

/**
 * Create ticket (contact)
 * Create a ticket on behalf of an identified contact. Requires Authorization: Bearer <contact_jwt>.
 */
export const createTicketContactOptions = (options: Options<CreateTicketContactData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTicketContact({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTicketContactQueryKey(options)
    });
};

/**
 * Create ticket (contact)
 * Create a ticket on behalf of an identified contact. Requires Authorization: Bearer <contact_jwt>.
 */
export const createTicketContactMutation = (options?: Partial<Options<CreateTicketContactData>>): MutationOptions<CreateTicketContactResponse, DefaultError, Options<CreateTicketContactData>> => {
    const mutationOptions: MutationOptions<CreateTicketContactResponse, DefaultError, Options<CreateTicketContactData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTicketContact({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTicketContactQueryKey = (options: Options<GetTicketContactData>) => createQueryKey('getTicketContact', options);

/**
 * Get ticket (contact)
 */
export const getTicketContactOptions = (options: Options<GetTicketContactData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTicketContact({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTicketContactQueryKey(options)
    });
};

export const listMessagesContactQueryKey = (options: Options<ListMessagesContactData>) => createQueryKey('listMessagesContact', options);

/**
 * List messages (contact)
 */
export const listMessagesContactOptions = (options: Options<ListMessagesContactData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listMessagesContact({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listMessagesContactQueryKey(options)
    });
};

export const postMessageContactQueryKey = (options: Options<PostMessageContactData>) => createQueryKey('postMessageContact', options);

/**
 * Post message (contact)
 */
export const postMessageContactOptions = (options: Options<PostMessageContactData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postMessageContact({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMessageContactQueryKey(options)
    });
};

/**
 * Post message (contact)
 */
export const postMessageContactMutation = (options?: Partial<Options<PostMessageContactData>>): MutationOptions<PostMessageContactResponse, DefaultError, Options<PostMessageContactData>> => {
    const mutationOptions: MutationOptions<PostMessageContactResponse, DefaultError, Options<PostMessageContactData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postMessageContact({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listOrgsQueryKey = (options?: Options<ListOrgsData>) => createQueryKey('listOrgs', options);

/**
 * List organizations
 */
export const listOrgsOptions = (options?: Options<ListOrgsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listOrgs({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOrgsQueryKey(options)
    });
};

export const createOrgQueryKey = (options: Options<CreateOrgData>) => createQueryKey('createOrg', options);

/**
 * Create organization
 */
export const createOrgOptions = (options: Options<CreateOrgData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createOrg({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createOrgQueryKey(options)
    });
};

/**
 * Create organization
 */
export const createOrgMutation = (options?: Partial<Options<CreateOrgData>>): MutationOptions<CreateOrgResponse, DefaultError, Options<CreateOrgData>> => {
    const mutationOptions: MutationOptions<CreateOrgResponse, DefaultError, Options<CreateOrgData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createOrg({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrgQueryKey = (options: Options<GetOrgData>) => createQueryKey('getOrg', options);

/**
 * Get organization
 */
export const getOrgOptions = (options: Options<GetOrgData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrg({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrgQueryKey(options)
    });
};

export const listMembersQueryKey = (options: Options<ListMembersData>) => createQueryKey('listMembers', options);

/**
 * List organization members
 */
export const listMembersOptions = (options: Options<ListMembersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listMembers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listMembersQueryKey(options)
    });
};

export const addMemberQueryKey = (options: Options<AddMemberData>) => createQueryKey('addMember', options);

/**
 * Add organization member
 */
export const addMemberOptions = (options: Options<AddMemberData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addMember({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addMemberQueryKey(options)
    });
};

/**
 * Add organization member
 */
export const addMemberMutation = (options?: Partial<Options<AddMemberData>>): MutationOptions<unknown, DefaultError, Options<AddMemberData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<AddMemberData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addMember({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Remove organization member
 */
export const removeMemberMutation = (options?: Partial<Options<RemoveMemberData>>): MutationOptions<unknown, DefaultError, Options<RemoveMemberData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<RemoveMemberData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeMember({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listTicketsQueryKey = (options: Options<ListTicketsData>) => createQueryKey('listTickets', options);

/**
 * List tickets
 * List tickets for an organization.
 */
export const listTicketsOptions = (options: Options<ListTicketsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTickets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTicketsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const listTicketsInfiniteQueryKey = (options: Options<ListTicketsData>): QueryKey<Options<ListTicketsData>> => createQueryKey('listTickets', options, true);

/**
 * List tickets
 * List tickets for an organization.
 */
export const listTicketsInfiniteOptions = (options: Options<ListTicketsData>) => {
    return infiniteQueryOptions<ListTicketsResponse, DefaultError, InfiniteData<ListTicketsResponse>, QueryKey<Options<ListTicketsData>>, number | Pick<QueryKey<Options<ListTicketsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListTicketsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listTickets({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTicketsInfiniteQueryKey(options)
    });
};

export const createTicketQueryKey = (options: Options<CreateTicketData>) => createQueryKey('createTicket', options);

/**
 * Create ticket (agent)
 * Create a ticket on behalf of an agent. Requires Authorization or headers.
 */
export const createTicketOptions = (options: Options<CreateTicketData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await createTicket({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: createTicketQueryKey(options)
    });
};

/**
 * Create ticket (agent)
 * Create a ticket on behalf of an agent. Requires Authorization or headers.
 */
export const createTicketMutation = (options?: Partial<Options<CreateTicketData>>): MutationOptions<CreateTicketResponse, CreateTicketError, Options<CreateTicketData>> => {
    const mutationOptions: MutationOptions<CreateTicketResponse, CreateTicketError, Options<CreateTicketData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await createTicket({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTicketQueryKey = (options: Options<GetTicketData>) => createQueryKey('getTicket', options);

/**
 * Get ticket
 */
export const getTicketOptions = (options: Options<GetTicketData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTicket({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTicketQueryKey(options)
    });
};

/**
 * Update ticket
 * Partial update of a ticket's fields.
 */
export const updateTicketMutation = (options?: Partial<Options<UpdateTicketData>>): MutationOptions<UpdateTicketResponse, UpdateTicketError, Options<UpdateTicketData>> => {
    const mutationOptions: MutationOptions<UpdateTicketResponse, UpdateTicketError, Options<UpdateTicketData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await updateTicket({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listMessagesQueryKey = (options: Options<ListMessagesData>) => createQueryKey('listMessages', options);

/**
 * List messages
 * List messages for a ticket. Agents can include internal messages via query.
 */
export const listMessagesOptions = (options: Options<ListMessagesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listMessages({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listMessagesQueryKey(options)
    });
};

export const postMessageQueryKey = (options: Options<PostMessageData>) => createQueryKey('postMessage', options);

/**
 * Create message (agent)
 * Post a message to a ticket as an agent. Requires headers: X-User-Id.
 */
export const postMessageOptions = (options: Options<PostMessageData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postMessage({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postMessageQueryKey(options)
    });
};

/**
 * Create message (agent)
 * Post a message to a ticket as an agent. Requires headers: X-User-Id.
 */
export const postMessageMutation = (options?: Partial<Options<PostMessageData>>): MutationOptions<PostMessageResponse, PostMessageError, Options<PostMessageData>> => {
    const mutationOptions: MutationOptions<PostMessageResponse, PostMessageError, Options<PostMessageData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postMessage({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listTagsQueryKey = (options: Options<ListTagsData>) => createQueryKey('listTags', options);

/**
 * List tags on ticket
 */
export const listTagsOptions = (options: Options<ListTagsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTags({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTagsQueryKey(options)
    });
};

export const addTagQueryKey = (options: Options<AddTagData>) => createQueryKey('addTag', options);

/**
 * Add tag to ticket
 * Adds an existing tag by id or creates one by name within the ticket's organization.
 */
export const addTagOptions = (options: Options<AddTagData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addTag({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addTagQueryKey(options)
    });
};

/**
 * Add tag to ticket
 * Adds an existing tag by id or creates one by name within the ticket's organization.
 */
export const addTagMutation = (options?: Partial<Options<AddTagData>>): MutationOptions<unknown, AddTagError, Options<AddTagData>> => {
    const mutationOptions: MutationOptions<unknown, AddTagError, Options<AddTagData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addTag({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Remove tag from ticket
 */
export const removeTagMutation = (options?: Partial<Options<RemoveTagData>>): MutationOptions<unknown, DefaultError, Options<RemoveTagData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<RemoveTagData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeTag({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listWatchersQueryKey = (options: Options<ListWatchersData>) => createQueryKey('listWatchers', options);

/**
 * List ticket watchers
 */
export const listWatchersOptions = (options: Options<ListWatchersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listWatchers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listWatchersQueryKey(options)
    });
};

export const addWatcherQueryKey = (options: Options<AddWatcherData>) => createQueryKey('addWatcher', options);

/**
 * Add ticket watcher
 */
export const addWatcherOptions = (options: Options<AddWatcherData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await addWatcher({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: addWatcherQueryKey(options)
    });
};

/**
 * Add ticket watcher
 */
export const addWatcherMutation = (options?: Partial<Options<AddWatcherData>>): MutationOptions<unknown, DefaultError, Options<AddWatcherData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<AddWatcherData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await addWatcher({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Remove ticket watcher
 */
export const removeWatcherMutation = (options?: Partial<Options<RemoveWatcherData>>): MutationOptions<unknown, DefaultError, Options<RemoveWatcherData>> => {
    const mutationOptions: MutationOptions<unknown, DefaultError, Options<RemoveWatcherData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await removeWatcher({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};