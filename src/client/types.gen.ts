// This file is auto-generated by @hey-api/openapi-ts

export type ActionCatalogItem = {
    action: string;
    label: string;
    requires_auth: boolean;
};

export type ActionCatalogResponse = {
    items: Array<ActionCatalogItem>;
};

export type ActionExecuteRequest = {
    action: string;
    auth_token?: string | null;
    org_domain: string;
    params: {
        [key: string]: unknown;
    } | null;
    user_id: string;
};

export type ActionExecuteResponse = {
    eta_seconds?: number | null;
    receipt_id: string;
    status: string;
};

export type AddMemberRequest = {
    role: string;
    user_id: string;
};

export type AdjustmentResponse = {
    id: string;
};

export type AgentPresence = {
    current_ticket?: string | null;
    status: string;
    user_id: string;
};

export type ApiKeyListFilter = {
    include_revoked?: boolean | null;
    page?: number | null;
    per_page?: number | null;
};

export type ApiKeyResponse = {
    created_at: string;
    expires_at?: string | null;
    id: string;
    last_used?: string | null;
    name: string;
    revoked: boolean;
    scopes: Array<string>;
};

export type ApiResponseActionCatalogResponse = {
    data?: {
        items: Array<ActionCatalogItem>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseActionExecuteResponse = {
    data?: {
        eta_seconds?: number | null;
        receipt_id: string;
        status: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseApiKeyResponse = {
    data?: {
        created_at: string;
        expires_at?: string | null;
        id: string;
        last_used?: string | null;
        name: string;
        revoked: boolean;
        scopes: Array<string>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseAuthResponse = {
    data?: {
        email_verified: boolean;
        organizations: Array<UserOrgInfo>;
        session_token: string;
        two_fa_enabled: boolean;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseClientIdentifyResponse = {
    data?: {
        auth_level: string;
        email?: string | null;
        is_authenticated: boolean;
        name?: string | null;
        session_id: string;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseClientTicketResponse = {
    data?: {
        created_at: string;
        status: string;
        ticket_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseCreateApiKeyResponse = {
    data?: {
        created_at: string;
        expires_at?: string | null;
        id: string;
        key: string;
        name: string;
        scopes: Array<string>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseDraftResponse = {
    data?: {
        attachments?: unknown;
        content: string;
        created_at: string;
        id: string;
        organization_id: string;
        ticket_id: string;
        updated_at: string;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseEffectivePermissionsResponse = {
    data?: {
        effective_permissions: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseEvaluateSegmentResponse = {
    data?: {
        segment_id: string;
        total_matches: number;
        user_ids: Array<string>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseEventLogResponse = {
    data?: {
        created_at: string;
        event_type: string;
        id: string;
        metadata: unknown;
        organization_id: string;
        ticket_id?: string | null;
        user_id?: string | null;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseEventLogStats = {
    data?: {
        total: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseLinkResourcesResponse = {
    data?: {
        linked_count: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseMessageResponse = {
    data?: {
        attachments?: unknown;
        channel: string;
        content: string;
        id: string;
        sender_id: string;
        sender_name: string;
        sent_at: string;
        ticket_id: string;
        visibility: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOptionDraftResponse = {
    data?: null | {
        attachments?: unknown;
        content: string;
        created_at: string;
        id: string;
        organization_id: string;
        ticket_id: string;
        updated_at: string;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOptionMessageResponse = {
    data?: null | {
        attachments?: unknown;
        channel: string;
        content: string;
        id: string;
        sender_id: string;
        sender_name: string;
        sent_at: string;
        ticket_id: string;
        visibility: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOptionOrganizationSettingResponse = {
    data?: null | {
        created_at: string;
        id: string;
        key: string;
        updated_at: string;
        value: unknown;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOptionTeamAssignmentResponse = {
    data?: null | {
        assigned_at: string;
        assigned_by: string;
        team_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOrganizationResponse = {
    data?: {
        created_at: string;
        domain: string;
        id: string;
        name: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseOrganizationSettingResponse = {
    data?: {
        created_at: string;
        id: string;
        key: string;
        updated_at: string;
        value: unknown;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponsePresenceHeartbeatResponse = {
    data?: {
        collisions: Array<CollisionInfo>;
        current_ticket?: string | null;
        editors?: Array<string> | null;
        status: string;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseRegisterResponse = {
    data?: {
        email_verified: boolean;
        session_token: string;
        two_fa_enabled: boolean;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseRoleResponse = {
    data?: {
        color: string;
        created_at: string;
        id: string;
        managed: boolean;
        name: string;
        organization_id: string;
        permissions: number;
        position: number;
        updated_at: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSavedViewResponse = {
    data?: {
        created_at: string;
        filters: unknown;
        id: string;
        is_shared: boolean;
        name: string;
        updated_at: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSegmentResponse = {
    data?: {
        created_at: string;
        id: string;
        name: string;
        organization_id: string;
        rules: {
            [key: string]: unknown;
        };
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSessionInfo = {
    data?: {
        created_at: string;
        expires_at: string;
        id: string;
        ip_address: string;
        is_current: boolean;
        token: string;
        user_agent: string;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSessionListResponse = {
    data?: {
        sessions: Array<SessionInfo>;
        total: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSessionStats = {
    data?: {
        active_sessions: number;
        expired_sessions: number;
        total_sessions: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSettingsCatalogResponse = {
    data?: {
        definitions: Array<SettingDefinition>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSetup2FaResponse = {
    data?: {
        backup_codes: Array<string>;
        qr_code_svg: string;
        qr_code_url: string;
        secret: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseSlaPolicyResponse = {
    data?: {
        conditions: unknown;
        created_at: string;
        description?: string | null;
        id: string;
        is_active: boolean;
        name: string;
        targets: unknown;
        updated_at: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseString = {
    data?: string;
    message?: string | null;
    success: boolean;
};

export type ApiResponseTagResponse = {
    data?: {
        color: string;
        id: string;
        name: string;
        ticket_count: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTagWithTicketsResponse = {
    data?: {
        color: string;
        id: string;
        name: string;
        tickets: Array<TagTicketResponse>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTeamAssignmentResponse = {
    data?: {
        assigned_at: string;
        assigned_by: string;
        team_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTeamMemberResponse = {
    data?: {
        created_at: string;
        id: string;
        role: string;
        user_id: string;
        user_name: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTeamResponse = {
    data?: {
        created_at: string;
        description?: string | null;
        id: string;
        member_count: number;
        name: string;
        organization_id: string;
        updated_at: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTicketResponse = {
    data?: {
        assigned_team?: null | TeamAssignmentResponse;
        assigned_to?: string | null;
        assigned_to_name?: string | null;
        created_at: string;
        created_by: string;
        created_by_name: string;
        description: string;
        draft?: null | DraftResponse;
        id: string;
        messages?: Array<MessageResponse> | null;
        priority: string;
        status: string;
        subject: string;
        tags: Array<TicketTagResponse>;
        updated_at: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseTypingUsersResponse = {
    data?: {
        ticket_id: string;
        user_ids: Array<string>;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseUploadResponse = {
    data?: {
        attachments: Array<AttachmentResponse>;
        message: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseUploadSignResponse = {
    data?: {
        upload_fields: {
            [key: string]: unknown;
        } | null;
        url: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseUserCustomFieldResponse = {
    data?: {
        created_at: string;
        field_type: string;
        id: string;
        key: string;
        label: string;
        organization_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseUserProfileResponse = {
    data?: {
        created_at: string;
        email: string;
        email_verified: boolean;
        id: string;
        name: string;
        organizations: Array<UserOrgMembership>;
        two_fa_enabled: boolean;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseValue = {
    data?: unknown;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecAgentPresence = {
    data?: Array<{
        current_ticket?: string | null;
        status: string;
        user_id: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecApiKeyResponse = {
    data?: Array<{
        created_at: string;
        expires_at?: string | null;
        id: string;
        last_used?: string | null;
        name: string;
        revoked: boolean;
        scopes: Array<string>;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecAttachmentResponse = {
    data?: Array<{
        content_type: string;
        download_url: string;
        file_size: number;
        filename: string;
        id: string;
        original_filename: string;
        uploaded_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecClientMessagePublicItem = {
    data?: Array<{
        content: string;
        id: string;
        sent_at: string;
        ticket_id: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecClientTicketResponse = {
    data?: Array<{
        created_at: string;
        status: string;
        ticket_id: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecEffectiveSettingResponse = {
    data?: Array<{
        category: string;
        default_value: unknown;
        description: string;
        is_public: boolean;
        key: string;
        overridden: boolean;
        value: unknown;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecEventLogResponse = {
    data?: Array<{
        created_at: string;
        event_type: string;
        id: string;
        metadata: unknown;
        organization_id: string;
        ticket_id?: string | null;
        user_id?: string | null;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecGenericObject = {
    data?: Array<{
        data: {
            [key: string]: unknown;
        };
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecLoginAttemptResponse = {
    data?: Array<{
        attempted_at: string;
        id: string;
        ip_address: string;
        success: boolean;
        user_agent: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecLoginHistoryResponse = {
    data?: Array<{
        id: string;
        ip_address: string;
        logged_in_at: string;
        user_agent: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecMembershipResponse = {
    data?: Array<{
        created_at: string;
        id: string;
        invited_by?: string | null;
        status: string;
        user_email: string;
        user_id: string;
        user_name: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecMessageResponse = {
    data?: Array<{
        attachments?: unknown;
        channel: string;
        content: string;
        id: string;
        sender_id: string;
        sender_name: string;
        sent_at: string;
        ticket_id: string;
        visibility: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecOrganizationByDomainResponse = {
    data?: Array<{
        allow_domain_join: boolean;
        created_at: string;
        domain: string;
        id: string;
        name: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecOrganizationResponse = {
    data?: Array<{
        created_at: string;
        domain: string;
        id: string;
        name: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecOrganizationSettingResponse = {
    data?: Array<{
        created_at: string;
        id: string;
        key: string;
        updated_at: string;
        value: unknown;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecPermissionCatalogEntry = {
    data?: Array<{
        key: string;
        value: number;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecRoleResponse = {
    data?: Array<{
        color: string;
        created_at: string;
        id: string;
        managed: boolean;
        name: string;
        organization_id: string;
        permissions: number;
        position: number;
        updated_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecSavedViewResponse = {
    data?: Array<{
        created_at: string;
        filters: unknown;
        id: string;
        is_shared: boolean;
        name: string;
        updated_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecSegmentResponse = {
    data?: Array<{
        created_at: string;
        id: string;
        name: string;
        organization_id: string;
        rules: {
            [key: string]: unknown;
        };
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecSlaPolicyResponse = {
    data?: Array<{
        conditions: unknown;
        created_at: string;
        description?: string | null;
        id: string;
        is_active: boolean;
        name: string;
        targets: unknown;
        updated_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecString = {
    data?: Array<string>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecTagResponse = {
    data?: Array<{
        color: string;
        id: string;
        name: string;
        ticket_count: number;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecTeamMemberResponse = {
    data?: Array<{
        created_at: string;
        id: string;
        role: string;
        user_id: string;
        user_name: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecTeamResponse = {
    data?: Array<{
        created_at: string;
        description?: string | null;
        id: string;
        member_count: number;
        name: string;
        organization_id: string;
        updated_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecTicketResponse = {
    data?: Array<{
        assigned_team?: null | TeamAssignmentResponse;
        assigned_to?: string | null;
        assigned_to_name?: string | null;
        created_at: string;
        created_by: string;
        created_by_name: string;
        description: string;
        draft?: null | DraftResponse;
        id: string;
        messages?: Array<MessageResponse> | null;
        priority: string;
        status: string;
        subject: string;
        tags: Array<TicketTagResponse>;
        updated_at: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecUserCustomFieldResponse = {
    data?: Array<{
        created_at: string;
        field_type: string;
        id: string;
        key: string;
        label: string;
        organization_id: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecUserFieldValueResponse = {
    data?: Array<{
        field_id: string;
        field_type: string;
        key: string;
        label: string;
        updated_at?: string | null;
        value: {
            [key: string]: unknown;
        } | null;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecWatcherResponse = {
    data?: Array<{
        added_at: string;
        user_id: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecWebhookDelivery = {
    data?: Array<{
        attempt_count: number;
        created_at: string;
        delivered_at?: string | null;
        error_message?: string | null;
        event_type: string;
        id: string;
        next_retry?: string | null;
        payload: unknown;
        response_body?: string | null;
        response_code?: number | null;
        status: string;
        url: string;
        webhook_id: string;
        webhook_name: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseVecWebhookResponse = {
    data?: Array<{
        created_at: string;
        description?: string | null;
        enabled: boolean;
        events: Array<string>;
        failure_count: number;
        headers?: {
            [key: string]: string;
        } | null;
        id: string;
        last_delivery?: string | null;
        name: string;
        organization_id: string;
        success_count: number;
        updated_at: string;
        url: string;
    }>;
    message?: string | null;
    success: boolean;
};

export type ApiResponseWatcherResponse = {
    data?: {
        added_at: string;
        user_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseWebhookResponse = {
    data?: {
        created_at: string;
        description?: string | null;
        enabled: boolean;
        events: Array<string>;
        failure_count: number;
        headers?: {
            [key: string]: string;
        } | null;
        id: string;
        last_delivery?: string | null;
        name: string;
        organization_id: string;
        success_count: number;
        updated_at: string;
        url: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseWebhookStats = {
    data?: {
        average_response_time?: number | null;
        deliveries_this_week: number;
        deliveries_today: number;
        enabled_webhooks: number;
        event_distribution: Array<EventTypeDelivery>;
        most_active_webhooks: Array<WebhookActivity>;
        recent_failures: Array<WebhookDelivery>;
        success_rate: number;
        total_webhooks: number;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseWebhookTestResult = {
    data?: {
        error_message?: string | null;
        response_code?: number | null;
        response_time_ms: number;
        success: boolean;
        webhook_id: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseWsTokenResponse = {
    data?: {
        expires_at: string;
        token: string;
        url: string;
    };
    message?: string | null;
    success: boolean;
};

export type ApiResponseU64 = {
    data?: number;
    message?: string | null;
    success: boolean;
};

export type AssignRoleRequest = {
    user_id: string;
};

export type AssignTeamRequest = {
    team_id: string;
};

export type AttachmentResponse = {
    content_type: string;
    download_url: string;
    file_size: number;
    filename: string;
    id: string;
    original_filename: string;
    uploaded_at: string;
};

export type AuthProfileResponse = {
    email: string;
    email_verified: boolean;
    organizations: Array<OrganizationDetail>;
    two_fa_enabled: boolean;
    user_id: string;
};

export type AuthResponse = {
    email_verified: boolean;
    organizations: Array<UserOrgInfo>;
    session_token: string;
    two_fa_enabled: boolean;
    user_id: string;
};

export type BillingPeriod = {
    ends_at?: string | null;
};

export type BillingSubscriptionResponse = {
    cancel_at?: string | null;
    canceled_at?: string | null;
    current_period_end?: string | null;
    current_period_start?: string | null;
    id: string;
    org_id: string;
    price_id?: string | null;
    product_id?: string | null;
    quantity?: number | null;
    status: string;
    trial_end?: string | null;
};

export type BulkTicketUpdateRequest = {
    add_tag_ids?: Array<string> | null;
    assigned_to?: string | null;
    priority?: string | null;
    remove_tag_ids?: Array<string> | null;
    status?: string | null;
    ticket_ids: Array<string>;
};

export type CancelSubscriptionRequest = {
    at_period_end: boolean;
};

export type ChangePasswordRequest = {
    current_password: string;
    new_password: string;
};

export type ChangeSubscriptionRequest = {
    price_id?: string | null;
    proration_behavior?: string | null;
    quantity?: number | null;
};

export type ClientIdentifyRequest = {
    anonymous_id?: string | null;
    email?: string | null;
    external_id?: string | null;
    jwt?: string | null;
    name?: string | null;
    org_domain: string;
    user_id?: string | null;
};

export type ClientIdentifyResponse = {
    auth_level: string;
    email?: string | null;
    is_authenticated: boolean;
    name?: string | null;
    session_id: string;
    user_id: string;
};

export type ClientMessagePublicItem = {
    content: string;
    id: string;
    sent_at: string;
    ticket_id: string;
};

export type ClientMessageRequest = {
    message: string;
    metadata?: unknown;
    org_domain: string;
    user_id: string;
};

export type ClientTicketResponse = {
    created_at: string;
    status: string;
    ticket_id: string;
};

export type CollisionInfo = {
    ticket_id: string;
    user_id: string;
};

export type CreateAdjustmentRequest = {
    amount_minor: number;
    currency: string;
    invoice_id: string;
    kind: string;
    reason?: string | null;
};

export type CreateApiKeyRequest = {
    expires_in_days?: number | null;
    name: string;
    scopes: Array<string>;
};

export type CreateApiKeyResponse = {
    created_at: string;
    expires_at?: string | null;
    id: string;
    key: string;
    name: string;
    scopes: Array<string>;
};

export type CreateCheckoutRequest = {
    customer_id?: string | null;
    org_id?: string | null;
    price_id: string;
    quantity?: number | null;
    return_url?: string | null;
};

export type CreateCheckoutResponse = {
    checkout_url: string;
};

export type CreateCustomFieldRequest = {
    field_type: string;
    key: string;
    label: string;
};

export type CreateEventRequest = {
    event_type: string;
    metadata?: unknown;
    ticket_id?: string | null;
    user_id?: string | null;
};

export type CreateMessageRequest = {
    attachments?: unknown;
    channel: string;
    content: string;
    visibility?: string | null;
};

export type CreateOrganizationRequest = {
    domain: string;
    name: string;
};

export type CreateRoleRequest = {
    color?: string | null;
    managed?: boolean | null;
    name: string;
    permissions: number;
    position?: number | null;
};

export type CreateSegmentRequest = {
    name: string;
    rules: {
        [key: string]: unknown;
    };
};

export type CreateSlaPolicyRequest = {
    conditions: unknown;
    description?: string | null;
    is_active?: boolean | null;
    name: string;
    targets: unknown;
};

export type CreateSubscriptionRequest = {
    customer_id?: string | null;
    price_id: string;
    proration_behavior?: string | null;
    quantity?: number | null;
    return_url?: string | null;
    trial_end?: string | null;
};

export type CreateTagRequest = {
    color: string;
    name: string;
};

export type CreateTeamRequest = {
    description?: string | null;
    name: string;
};

export type CreateTicketRequest = {
    assigned_to?: string | null;
    description?: string | null;
    priority: string;
    subject: string;
    tag_ids?: Array<string> | null;
};

export type CreateWebhookRequest = {
    description?: string | null;
    enabled: boolean;
    events: Array<string>;
    headers?: {
        [key: string]: string;
    } | null;
    name: string;
    secret?: string | null;
    url: string;
};

export type DraftResponse = {
    attachments?: unknown;
    content: string;
    created_at: string;
    id: string;
    organization_id: string;
    ticket_id: string;
    updated_at: string;
    user_id: string;
};

export type EffectivePermissionsResponse = {
    effective_permissions: number;
};

export type EffectiveSettingResponse = {
    category: string;
    default_value: unknown;
    description: string;
    is_public: boolean;
    key: string;
    overridden: boolean;
    value: unknown;
};

export type Enable2FaRequest = {
    totp_code: string;
};

export type ErrorEnvelope = {
    error: ErrorResponse;
};

export type ErrorResponse = {
    code: string;
    details: {
        [key: string]: unknown;
    } | null;
    message: string;
};

export type EvaluateSegmentResponse = {
    segment_id: string;
    total_matches: number;
    user_ids: Array<string>;
};

export type EventLogListFilter = {
    cursor?: string | null;
    event_type: string;
    from_date?: string | null;
    limit?: number | null;
    page?: number | null;
    per_page?: number | null;
    ticket_id?: string | null;
    to_date?: string | null;
    user_id?: string | null;
};

export type EventLogResponse = {
    created_at: string;
    event_type: string;
    id: string;
    metadata: unknown;
    organization_id: string;
    ticket_id?: string | null;
    user_id?: string | null;
};

export type EventLogStats = {
    total: number;
};

export type EventTypeCount = {
    count: number;
    event_type: string;
};

export type EventTypeDelivery = {
    delivery_count: number;
    event_type: string;
    success_rate: number;
};

export type ExtendSessionRequest = {
    extension_hours: number;
};

export type GenericObject = {
    data: {
        [key: string]: unknown;
    };
};

export type InviteUserRequest = {
    email: string;
    role: string;
};

export type JoinOrganizationRequest = {
    org_id: string;
};

export type LinkResourcesRequest = {
    org_domain: string;
    resources: Array<ResourceLink>;
    ticket_id?: string | null;
    user_id?: string | null;
};

export type LinkResourcesResponse = {
    linked_count: number;
};

export type ListSubscriptionsQuery = {
    cursor?: string | null;
    limit?: number | null;
    status?: string | null;
};

export type LockRequest = {
    ttl_seconds: number;
};

export type LoginAttemptResponse = {
    attempted_at: string;
    id: string;
    ip_address: string;
    success: boolean;
    user_agent: string;
};

export type LoginHistoryResponse = {
    id: string;
    ip_address: string;
    logged_in_at: string;
    user_agent: string;
};

export type LoginRequest = {
    email: string;
    org_domain?: string | null;
    password: string;
    totp_code?: string | null;
};

export type MembershipResponse = {
    created_at: string;
    id: string;
    invited_by?: string | null;
    status: string;
    user_email: string;
    user_id: string;
    user_name: string;
};

export type MergeTicketsRequest = {
    merged_ticket_id: string;
    primary_ticket_id: string;
};

export type MessageListFilter = {
    channel?: string | null;
    include_internal?: boolean | null;
    page?: number | null;
    per_page?: number | null;
    sender_id?: string | null;
};

export type MessageResponse = {
    attachments?: unknown;
    channel: string;
    content: string;
    id: string;
    sender_id: string;
    sender_name: string;
    sent_at: string;
    ticket_id: string;
    visibility: string;
};

export type OrganizationByDomainResponse = {
    allow_domain_join: boolean;
    created_at: string;
    domain: string;
    id: string;
    name: string;
};

export type OrganizationDetail = {
    domain: string;
    id: string;
    name: string;
    role: string;
};

export type OrganizationResponse = {
    created_at: string;
    domain: string;
    id: string;
    name: string;
};

export type OrganizationSettingResponse = {
    created_at: string;
    id: string;
    key: string;
    updated_at: string;
    value: unknown;
};

export type PasswordResetRequest = {
    email: string;
};

export type PaymentLinkCreateRequest = {
    custom_data?: unknown;
    customer_id?: string | null;
    items: Array<PaymentLinkItem>;
    return_url?: string | null;
};

export type PaymentLinkCreateResponse = {
    data: PaymentLinkCreateResponseData;
};

export type PaymentLinkCreateResponseData = {
    id: string;
    url: string;
};

export type PaymentLinkItem = {
    price_id: string;
    quantity?: number | null;
};

export type PermissionCatalogEntry = {
    key: string;
    value: number;
};

export type PresenceHeartbeatRequest = {
    current_ticket?: string | null;
    editing_ticket?: string | null;
    status: string;
};

export type PresenceHeartbeatResponse = {
    collisions: Array<CollisionInfo>;
    current_ticket?: string | null;
    editors?: Array<string> | null;
    status: string;
    user_id: string;
};

export type PublicBillingConfigResponse = {
    env: string;
    token: string;
};

export type RefundAmount = {
    amount: number;
};

export type RefundCreateRequest = {
    amount?: null | RefundAmount;
    reason?: string | null;
};

export type RefundCreateResponse = {
    data: RefundCreateResponseData;
};

export type RefundCreateResponseData = {
    id: string;
};

export type RefundRequest = {
    amount_minor?: number | null;
    payment_id: string;
    reason?: string | null;
};

export type RefundResponse = {
    refund_id: string;
};

export type RegisterRequest = {
    email: string;
    name: string;
    password: string;
};

export type RegisterResponse = {
    email_verified: boolean;
    session_token: string;
    two_fa_enabled: boolean;
    user_id: string;
};

export type ResendVerificationRequest = {
    email: string;
};

export type ResetPasswordRequest = {
    new_password: string;
    token: string;
};

export type ResourceLink = {
    attributes: {
        [key: string]: unknown;
    } | null;
    href?: string | null;
    id: string;
    provider?: string | null;
    state?: string | null;
    type: string;
};

export type ResumeSubscriptionRequest = {
    [key: string]: unknown;
};

export type RevokeAllSessionsRequest = {
    keep_current: boolean;
};

export type RevokeSessionRequest = {
    session_id: string;
};

export type RoleResponse = {
    color: string;
    created_at: string;
    id: string;
    managed: boolean;
    name: string;
    organization_id: string;
    permissions: number;
    position: number;
    updated_at: string;
};

export type SavedViewRequest = {
    filters: unknown;
    is_shared?: boolean | null;
    name: string;
};

export type SavedViewResponse = {
    created_at: string;
    filters: unknown;
    id: string;
    is_shared: boolean;
    name: string;
    updated_at: string;
};

export type SegmentResponse = {
    created_at: string;
    id: string;
    name: string;
    organization_id: string;
    rules: {
        [key: string]: unknown;
    };
};

export type SessionInfo = {
    created_at: string;
    expires_at: string;
    id: string;
    ip_address: string;
    is_current: boolean;
    token: string;
    user_agent: string;
    user_id: string;
};

export type SessionListResponse = {
    sessions: Array<SessionInfo>;
    total: number;
};

export type SessionStats = {
    active_sessions: number;
    expired_sessions: number;
    total_sessions: number;
};

export type SetOrganizationSettingRequest = {
    key: string;
    value: unknown;
};

export type SetUserCustomFieldValuesRequest = {
    values: Array<SetUserCustomFieldValuesRequestItem>;
};

export type SetUserCustomFieldValuesRequestItem = {
    field_id: string;
    value: {
        [key: string]: unknown;
    };
};

export type SettingDataType = 'string' | 'number' | 'boolean' | 'enum' | 'json';

export type SettingDefinition = {
    category: string;
    data_type: SettingDataType;
    default_value: unknown;
    description: string;
    is_public: boolean;
    key: string;
    options?: Array<SettingOption> | null;
    scope: SettingScope;
};

export type SettingOption = {
    label: string;
    value: unknown;
};

export type SettingScope = 'org' | 'system' | 'user';

export type SettingsCatalogResponse = {
    definitions: Array<SettingDefinition>;
};

export type Setup2FaResponse = {
    backup_codes: Array<string>;
    qr_code_svg: string;
    qr_code_url: string;
    secret: string;
};

export type SlaPolicyResponse = {
    conditions: unknown;
    created_at: string;
    description?: string | null;
    id: string;
    is_active: boolean;
    name: string;
    targets: unknown;
    updated_at: string;
};

export type SplitTicketRequest = {
    message_ids: Array<string>;
    new_priority?: string | null;
    new_subject?: string | null;
    source_ticket_id: string;
};

export type SubscriptionCancelRequest = {
    at_period_end: boolean;
};

export type SubscriptionData = {
    current_billing_period?: null | BillingPeriod;
    id: string;
    items?: Array<SubscriptionItem> | null;
    status: string;
};

export type SubscriptionGetResponse = {
    data: SubscriptionData;
};

export type SubscriptionItem = {
    price_id?: string | null;
    quantity?: number | null;
};

export type SubscriptionResumeRequest = {
    [key: string]: unknown;
};

export type SubscriptionSnapshot = {
    current_period_end?: string | null;
    price_id?: string | null;
    product_id?: string | null;
    quantity?: number | null;
    status: string;
};

export type SubscriptionUpdateRequest = {
    price_id?: string | null;
    proration_behavior?: string | null;
    quantity?: number | null;
};

export type SyncOp = {
    changes: unknown;
    entity: string;
    expected_version?: number | null;
    id: string;
    idempotency_key?: string | null;
};

export type SyncOpResult = {
    entity: string;
    id: string;
    message?: string | null;
    new_version?: number | null;
    seq?: number | null;
    status: string;
};

export type SyncOpsRequest = {
    ops: Array<SyncOp>;
};

export type SyncOpsResponse = {
    head_seq: number;
    partial_success: boolean;
    results: Array<SyncOpResult>;
};

export type SyncSnapshotResponse = {
    head_seq: number;
    max_backlog?: number | null;
    ops_since?: Array<unknown> | null;
    since_covered?: boolean | null;
    tickets?: Array<SyncTicket> | null;
};

export type SyncTicket = {
    assigned_to?: string | null;
    description: string;
    id: string;
    priority: string;
    status: string;
    subject: string;
    updated_at: string;
    version: number;
};

export type TagManagementRequest = {
    tag_ids: Array<string>;
};

export type TagResponse = {
    color: string;
    id: string;
    name: string;
    ticket_count: number;
};

export type TagTicketResponse = {
    created_at: string;
    id: string;
    priority: string;
    status: string;
    subject: string;
};

export type TagWithTicketsResponse = {
    color: string;
    id: string;
    name: string;
    tickets: Array<TagTicketResponse>;
};

export type TeamAssignmentResponse = {
    assigned_at: string;
    assigned_by: string;
    team_id: string;
};

export type TeamMemberResponse = {
    created_at: string;
    id: string;
    role: string;
    user_id: string;
    user_name: string;
};

export type TeamResponse = {
    created_at: string;
    description?: string | null;
    id: string;
    member_count: number;
    name: string;
    organization_id: string;
    updated_at: string;
};

export type TestWebhookRequest = {
    event_type: string;
    test_data?: unknown;
};

export type TicketListFilter = {
    assigned_to?: string | null;
    created_by?: string | null;
    created_from?: string | null;
    created_to?: string | null;
    page?: number | null;
    per_page?: number | null;
    priority?: string | null;
    status?: string | null;
    tag_ids?: Array<string> | null;
};

export type TicketResponse = {
    assigned_team?: null | TeamAssignmentResponse;
    assigned_to?: string | null;
    assigned_to_name?: string | null;
    created_at: string;
    created_by: string;
    created_by_name: string;
    description: string;
    draft?: null | DraftResponse;
    id: string;
    messages?: Array<MessageResponse> | null;
    priority: string;
    status: string;
    subject: string;
    tags: Array<TicketTagResponse>;
    updated_at: string;
};

export type TicketTagResponse = {
    color: string;
    id: string;
    name: string;
};

export type TypingUpdateRequest = {
    typing: boolean;
};

export type TypingUsersResponse = {
    ticket_id: string;
    user_ids: Array<string>;
};

export type UpdateMembershipRequest = {
    status: string;
};

export type UpdateProfileRequest = {
    email?: string | null;
    name?: string | null;
};

export type UpdateRoleRequest = {
    color?: string | null;
    name?: string | null;
    permissions?: number | null;
    position?: number | null;
};

export type UpdateSegmentRequest = {
    name?: string | null;
    rules: {
        [key: string]: unknown;
    } | null;
};

export type UpdateSlaPolicyRequest = {
    conditions?: unknown;
    description?: string | null;
    is_active?: boolean | null;
    name?: string | null;
    targets?: unknown;
};

export type UpdateTagRequest = {
    color?: string | null;
    name?: string | null;
};

export type UpdateTeamRequest = {
    description?: string | null;
    name?: string | null;
};

export type UpdateTicketRequest = {
    assigned_to?: string | null;
    readonly description?: string | null;
    priority?: string | null;
    status?: string | null;
    subject?: string | null;
    version?: number | null;
};

export type UpdateWebhookRequest = {
    description?: string | null;
    enabled?: boolean | null;
    events?: Array<string> | null;
    headers?: {
        [key: string]: string;
    } | null;
    name?: string | null;
    secret?: string | null;
    url?: string | null;
};

export type UploadResponse = {
    attachments: Array<AttachmentResponse>;
    message: string;
};

export type UploadSignRequest = {
    content_type: string;
    name: string;
};

export type UploadSignResponse = {
    upload_fields: {
        [key: string]: unknown;
    } | null;
    url: string;
};

export type UpsertDraftRequest = {
    attachments?: unknown;
    content: string;
};

export type UsageReportRequest = {
    quantity: number;
    subscription_item_id: string;
    timestamp?: string | null;
};

export type UsageReportResponse = {
    data: unknown;
};

export type UserCustomFieldResponse = {
    created_at: string;
    field_type: string;
    id: string;
    key: string;
    label: string;
    organization_id: string;
};

export type UserEventCount = {
    count: number;
    user_id: string;
};

export type UserFieldValueResponse = {
    field_id: string;
    field_type: string;
    key: string;
    label: string;
    updated_at?: string | null;
    value: {
        [key: string]: unknown;
    } | null;
};

export type UserOrgInfo = {
    domain: string;
    id: string;
    name: string;
};

export type UserOrgMembership = {
    joined_at: string;
    organization_domain: string;
    organization_id: string;
    organization_name: string;
    status: string;
};

export type UserProfileResponse = {
    created_at: string;
    email: string;
    email_verified: boolean;
    id: string;
    name: string;
    organizations: Array<UserOrgMembership>;
    two_fa_enabled: boolean;
};

export type VerifyEmailRequest = {
    token: string;
};

export type WatcherResponse = {
    added_at: string;
    user_id: string;
};

export type WebhookActivity = {
    delivery_count: number;
    success_rate: number;
    webhook_id: string;
    webhook_name: string;
};

export type WebhookDelivery = {
    attempt_count: number;
    created_at: string;
    delivered_at?: string | null;
    error_message?: string | null;
    event_type: string;
    id: string;
    next_retry?: string | null;
    payload: unknown;
    response_body?: string | null;
    response_code?: number | null;
    status: string;
    url: string;
    webhook_id: string;
    webhook_name: string;
};

export type WebhookListFilter = {
    enabled?: boolean | null;
    event_type?: string | null;
    name_search?: string | null;
    page?: number | null;
    per_page?: number | null;
    url_search?: string | null;
};

export type WebhookResponse = {
    created_at: string;
    description?: string | null;
    enabled: boolean;
    events: Array<string>;
    failure_count: number;
    headers?: {
        [key: string]: string;
    } | null;
    id: string;
    last_delivery?: string | null;
    name: string;
    organization_id: string;
    success_count: number;
    updated_at: string;
    url: string;
};

export type WebhookStats = {
    average_response_time?: number | null;
    deliveries_this_week: number;
    deliveries_today: number;
    enabled_webhooks: number;
    event_distribution: Array<EventTypeDelivery>;
    most_active_webhooks: Array<WebhookActivity>;
    recent_failures: Array<WebhookDelivery>;
    success_rate: number;
    total_webhooks: number;
};

export type WebhookTestResult = {
    error_message?: string | null;
    response_code?: number | null;
    response_time_ms: number;
    success: boolean;
    webhook_id: string;
};

export type WsTokenResponse = {
    expires_at: string;
    token: string;
    url: string;
};

export type GetAttachmentStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/admin/attachments/stats';
};

export type GetAttachmentStatsErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Admin access required
     */
    403: ErrorEnvelope;
    /**
     * Rate limited
     */
    429: ErrorEnvelope;
};

export type GetAttachmentStatsError = GetAttachmentStatsErrors[keyof GetAttachmentStatsErrors];

export type GetAttachmentStatsResponses = {
    /**
     * File storage statistics
     */
    200: ApiResponseValue;
};

export type GetAttachmentStatsResponse = GetAttachmentStatsResponses[keyof GetAttachmentStatsResponses];

export type DownloadAttachmentData = {
    body?: never;
    path: {
        /**
         * Attachment ID
         */
        attachment_id: string;
    };
    query?: never;
    url: '/api/v1/attachments/{attachment_id}/download';
};

export type DownloadAttachmentErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied
     */
    403: ErrorEnvelope;
    /**
     * Attachment not found
     */
    404: ErrorEnvelope;
};

export type DownloadAttachmentError = DownloadAttachmentErrors[keyof DownloadAttachmentErrors];

export type DownloadAttachmentResponses = {
    /**
     * File download
     */
    200: Blob | File;
};

export type DownloadAttachmentResponse = DownloadAttachmentResponses[keyof DownloadAttachmentResponses];

export type Disable2FaData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/disable-2fa';
};

export type Disable2FaErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Email verification required
     */
    403: ErrorEnvelope;
};

export type Disable2FaError = Disable2FaErrors[keyof Disable2FaErrors];

export type Disable2FaResponses = {
    /**
     * 2FA disabled successfully
     */
    200: ApiResponseString;
};

export type Disable2FaResponse = Disable2FaResponses[keyof Disable2FaResponses];

export type Enable2FaData = {
    body: Enable2FaRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/enable-2fa';
};

export type Enable2FaErrors = {
    /**
     * Invalid TOTP code
     */
    400: ErrorEnvelope;
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Email verification required
     */
    403: ErrorEnvelope;
};

export type Enable2FaError = Enable2FaErrors[keyof Enable2FaErrors];

export type Enable2FaResponses = {
    /**
     * 2FA enabled successfully
     */
    200: ApiResponseString;
};

export type Enable2FaResponse = Enable2FaResponses[keyof Enable2FaResponses];

export type LoginData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type LoginErrors = {
    /**
     * Invalid credentials
     */
    401: ErrorEnvelope;
    /**
     * 2FA code required
     */
    403: ErrorEnvelope;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * Login successful
     */
    200: ApiResponseAuthResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/logout';
};

export type LogoutErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
};

export type LogoutError = LogoutErrors[keyof LogoutErrors];

export type LogoutResponses = {
    /**
     * Logout successful
     */
    200: ApiResponseString;
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type RegisterData = {
    body: RegisterRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/register';
};

export type RegisterErrors = {
    /**
     * Invalid input
     */
    400: ErrorEnvelope;
    /**
     * Email already exists
     */
    409: ErrorEnvelope;
};

export type RegisterError = RegisterErrors[keyof RegisterErrors];

export type RegisterResponses = {
    /**
     * User registered successfully
     */
    201: ApiResponseRegisterResponse;
};

export type RegisterResponse2 = RegisterResponses[keyof RegisterResponses];

export type RequestPasswordResetData = {
    body: PasswordResetRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/request-password-reset';
};

export type RequestPasswordResetErrors = {
    /**
     * User not found
     */
    404: ErrorEnvelope;
};

export type RequestPasswordResetError = RequestPasswordResetErrors[keyof RequestPasswordResetErrors];

export type RequestPasswordResetResponses = {
    /**
     * Password reset email sent
     */
    200: ApiResponseString;
};

export type RequestPasswordResetResponse = RequestPasswordResetResponses[keyof RequestPasswordResetResponses];

export type ResendVerificationData = {
    body: ResendVerificationRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/resend-verification';
};

export type ResendVerificationErrors = {
    /**
     * Email already verified or rate limit exceeded
     */
    400: ErrorEnvelope;
    /**
     * User not found
     */
    404: ErrorEnvelope;
    /**
     * Rate limit exceeded
     */
    429: ErrorEnvelope;
};

export type ResendVerificationError = ResendVerificationErrors[keyof ResendVerificationErrors];

export type ResendVerificationResponses = {
    /**
     * Verification email sent
     */
    200: ApiResponseString;
};

export type ResendVerificationResponse = ResendVerificationResponses[keyof ResendVerificationResponses];

export type ResetPasswordData = {
    body: ResetPasswordRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/reset-password';
};

export type ResetPasswordErrors = {
    /**
     * Invalid or expired token
     */
    400: ErrorEnvelope;
};

export type ResetPasswordError = ResetPasswordErrors[keyof ResetPasswordErrors];

export type ResetPasswordResponses = {
    /**
     * Password reset successful
     */
    200: ApiResponseString;
};

export type ResetPasswordResponse = ResetPasswordResponses[keyof ResetPasswordResponses];

export type Setup2FaData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/setup-2fa';
};

export type Setup2FaErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Email verification required
     */
    403: ErrorEnvelope;
};

export type Setup2FaError = Setup2FaErrors[keyof Setup2FaErrors];

export type Setup2FaResponses = {
    /**
     * 2FA setup data
     */
    200: ApiResponseSetup2FaResponse;
};

export type Setup2FaResponse2 = Setup2FaResponses[keyof Setup2FaResponses];

export type VerifyEmailData = {
    body: VerifyEmailRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/verify-email';
};

export type VerifyEmailErrors = {
    /**
     * Invalid or expired verification token
     */
    400: ErrorEnvelope;
};

export type VerifyEmailError = VerifyEmailErrors[keyof VerifyEmailErrors];

export type VerifyEmailResponses = {
    /**
     * Email verified successfully
     */
    200: ApiResponseString;
};

export type VerifyEmailResponse = VerifyEmailResponses[keyof VerifyEmailResponses];

export type CreateCheckoutData = {
    body: CreateCheckoutRequest;
    path?: never;
    query?: never;
    url: '/api/v1/billing/checkout';
};

export type CreateCheckoutErrors = {
    /**
     * Paddle error
     */
    500: unknown;
};

export type CreateCheckoutResponses = {
    /**
     * Checkout created
     */
    200: CreateCheckoutResponse;
};

export type CreateCheckoutResponse2 = CreateCheckoutResponses[keyof CreateCheckoutResponses];

export type CreateAdjustmentData = {
    body: CreateAdjustmentRequest;
    path: {
        /**
         * Invoice identifier
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/billing/invoices/{id}/adjustments';
};

export type CreateAdjustmentResponses = {
    /**
     * Adjustment accepted
     */
    202: AdjustmentResponse;
};

export type CreateAdjustmentResponse = CreateAdjustmentResponses[keyof CreateAdjustmentResponses];

export type RefundPaymentData = {
    body: RefundRequest;
    path?: never;
    query?: never;
    url: '/api/v1/billing/payments/refund';
};

export type RefundPaymentResponses = {
    /**
     * Refund accepted
     */
    202: RefundResponse;
};

export type RefundPaymentResponse = RefundPaymentResponses[keyof RefundPaymentResponses];

export type GetPublicConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/billing/public-config';
};

export type GetPublicConfigResponses = {
    /**
     * Config
     */
    200: PublicBillingConfigResponse;
};

export type GetPublicConfigResponse = GetPublicConfigResponses[keyof GetPublicConfigResponses];

export type GetSubscriptionData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/billing/subscription';
};

export type GetSubscriptionErrors = {
    /**
     * User not in any organization
     */
    400: unknown;
};

export type GetSubscriptionResponses = {
    /**
     * Subscription snapshot
     */
    200: SubscriptionSnapshot;
};

export type GetSubscriptionResponse = GetSubscriptionResponses[keyof GetSubscriptionResponses];

export type ListSubscriptionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by status, e.g. Active, PastDue, Canceled
         */
        status?: string;
        /**
         * Opaque cursor for pagination (not currently used)
         */
        cursor?: string;
        /**
         * Max items to return (default 50, max 100)
         */
        limit?: number;
    };
    url: '/api/v1/billing/subscriptions';
};

export type ListSubscriptionsResponses = {
    /**
     * List of subscriptions
     */
    200: Array<BillingSubscriptionResponse>;
};

export type ListSubscriptionsResponse = ListSubscriptionsResponses[keyof ListSubscriptionsResponses];

export type CreateSubscriptionData = {
    body: CreateSubscriptionRequest;
    path?: never;
    query?: never;
    url: '/api/v1/billing/subscriptions';
};

export type CreateSubscriptionResponses = {
    /**
     * Subscription creation initiated
     */
    202: unknown;
};

export type ChangeSubscriptionData = {
    body: ChangeSubscriptionRequest;
    path: {
        /**
         * Internal subscription UUID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/billing/subscriptions/{id}';
};

export type ChangeSubscriptionResponses = {
    202: unknown;
};

export type CancelSubscriptionData = {
    body: CancelSubscriptionRequest;
    path: {
        /**
         * Internal subscription UUID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/billing/subscriptions/{id}/cancel';
};

export type CancelSubscriptionResponses = {
    202: unknown;
};

export type ResumeSubscriptionData = {
    body: ResumeSubscriptionRequest;
    path: {
        /**
         * Internal subscription UUID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/billing/subscriptions/{id}/resume';
};

export type ResumeSubscriptionResponses = {
    202: unknown;
};

export type PaddleWebhookData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/billing/webhook';
};

export type PaddleWebhookErrors = {
    /**
     * Invalid payload
     */
    400: unknown;
    /**
     * Invalid signature
     */
    401: unknown;
};

export type PaddleWebhookResponses = {
    /**
     * Event processed or ignored (idempotent)
     */
    200: unknown;
};

export type GetActionsCatalogData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Organization domain
         */
        org_domain: string;
        /**
         * ticket_id|user_id
         */
        context: string;
    };
    url: '/api/v1/client/actions/catalog';
};

export type GetActionsCatalogResponses = {
    /**
     * Actions catalog
     */
    200: ApiResponseActionCatalogResponse;
};

export type GetActionsCatalogResponse = GetActionsCatalogResponses[keyof GetActionsCatalogResponses];

export type ExecuteActionData = {
    body: ActionExecuteRequest;
    path?: never;
    query?: never;
    url: '/api/v1/client/actions/execute';
};

export type ExecuteActionResponses = {
    /**
     * Execution result
     */
    200: ApiResponseActionExecuteResponse;
};

export type ExecuteActionResponse = ExecuteActionResponses[keyof ExecuteActionResponses];

export type IdentifyUserData = {
    body: ClientIdentifyRequest;
    path?: never;
    query?: never;
    url: '/api/v1/client/identify';
};

export type IdentifyUserErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Organization not found
     */
    404: unknown;
};

export type IdentifyUserResponses = {
    /**
     * User identified successfully
     */
    200: ApiResponseClientIdentifyResponse;
};

export type IdentifyUserResponse = IdentifyUserResponses[keyof IdentifyUserResponses];

export type LinkResourcesData = {
    body: LinkResourcesRequest;
    path?: never;
    query?: never;
    url: '/api/v1/client/link_resources';
};

export type LinkResourcesResponses = {
    /**
     * Resources linked
     */
    200: ApiResponseLinkResourcesResponse;
};

export type LinkResourcesResponse2 = LinkResourcesResponses[keyof LinkResourcesResponses];

export type SendMessageData = {
    body: ClientMessageRequest;
    path?: never;
    query?: never;
    url: '/api/v1/client/message';
};

export type SendMessageErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Organization or user not found
     */
    404: unknown;
};

export type SendMessageResponses = {
    /**
     * Message sent successfully
     */
    201: ApiResponseClientTicketResponse;
};

export type SendMessageResponse = SendMessageResponses[keyof SendMessageResponses];

export type ClientRealtimeWsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/client/realtime';
};

export type ListResourcesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Ticket ID
         */
        ticket_id: string;
        /**
         * User ID
         */
        user_id: string;
        /**
         * CSV of types
         */
        types: string | null;
    };
    url: '/api/v1/client/resources';
};

export type ListResourcesResponses = {
    /**
     * Resources list
     */
    200: ApiResponseVecGenericObject;
};

export type ListResourcesResponse = ListResourcesResponses[keyof ListResourcesResponses];

export type GetTicketHistoryPublicData = {
    body?: never;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query: {
        /**
         * Organization domain
         */
        org_domain: string;
    };
    url: '/api/v1/client/tickets/{ticket_id}/history';
};

export type GetTicketHistoryPublicErrors = {
    /**
     * Organization or ticket not found
     */
    404: unknown;
};

export type GetTicketHistoryPublicResponses = {
    /**
     * Ticket history events
     */
    200: ApiResponseVecEventLogResponse;
};

export type GetTicketHistoryPublicResponse = GetTicketHistoryPublicResponses[keyof GetTicketHistoryPublicResponses];

export type GetTicketMessagesPublicData = {
    body?: never;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query: {
        /**
         * Organization domain
         */
        org_domain: string;
    };
    url: '/api/v1/client/tickets/{ticket_id}/messages';
};

export type GetTicketMessagesPublicErrors = {
    /**
     * Organization or ticket not found
     */
    404: unknown;
};

export type GetTicketMessagesPublicResponses = {
    /**
     * Ticket messages
     */
    200: ApiResponseVecClientMessagePublicItem;
};

export type GetTicketMessagesPublicResponse = GetTicketMessagesPublicResponses[keyof GetTicketMessagesPublicResponses];

export type GetUserTicketsData = {
    body?: never;
    path: {
        /**
         * User ID
         */
        user_id: string;
    };
    query: {
        /**
         * Organization domain
         */
        org_domain: string;
    };
    url: '/api/v1/client/tickets/{user_id}';
};

export type GetUserTicketsErrors = {
    /**
     * Organization not found
     */
    404: unknown;
};

export type GetUserTicketsResponses = {
    /**
     * User tickets
     */
    200: ApiResponseVecClientTicketResponse;
};

export type GetUserTicketsResponse = GetUserTicketsResponses[keyof GetUserTicketsResponses];

export type SignUploadData = {
    body: UploadSignRequest;
    path?: never;
    query?: never;
    url: '/api/v1/client/uploads/sign';
};

export type SignUploadResponses = {
    /**
     * Signed upload URL
     */
    200: ApiResponseUploadSignResponse;
};

export type SignUploadResponse = SignUploadResponses[keyof SignUploadResponses];

export type GetUserOrganizationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/organizations';
};

export type GetUserOrganizationsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
};

export type GetUserOrganizationsResponses = {
    /**
     * User organizations
     */
    200: ApiResponseVecOrganizationResponse;
};

export type GetUserOrganizationsResponse = GetUserOrganizationsResponses[keyof GetUserOrganizationsResponses];

export type CreateOrganizationData = {
    body: CreateOrganizationRequest;
    path?: never;
    query?: never;
    url: '/api/v1/organizations';
};

export type CreateOrganizationErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email verification required
     */
    403: unknown;
};

export type CreateOrganizationResponses = {
    /**
     * Organization created successfully
     */
    201: ApiResponseOrganizationResponse;
};

export type CreateOrganizationResponse = CreateOrganizationResponses[keyof CreateOrganizationResponses];

export type FindOrganizationsByEmailDomainData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Email address to find organizations for
         */
        email: string;
    };
    url: '/api/v1/organizations/by-domain';
};

export type FindOrganizationsByEmailDomainErrors = {
    /**
     * Invalid email format
     */
    400: unknown;
};

export type FindOrganizationsByEmailDomainResponses = {
    /**
     * Organizations found for email domain
     */
    200: ApiResponseVecOrganizationByDomainResponse;
};

export type FindOrganizationsByEmailDomainResponse = FindOrganizationsByEmailDomainResponses[keyof FindOrganizationsByEmailDomainResponses];

export type JoinOrganizationData = {
    body: JoinOrganizationRequest;
    path?: never;
    query?: never;
    url: '/api/v1/organizations/join';
};

export type JoinOrganizationErrors = {
    /**
     * Invalid input or already a member
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Domain-based joining not allowed or email verification required
     */
    403: unknown;
    /**
     * Organization not found
     */
    404: unknown;
};

export type JoinOrganizationResponses = {
    /**
     * Successfully joined organization
     */
    200: ApiResponseString;
};

export type JoinOrganizationResponse = JoinOrganizationResponses[keyof JoinOrganizationResponses];

export type GetOrganizationData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}';
};

export type GetOrganizationErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetOrganizationResponses = {
    /**
     * Organization details
     */
    200: ApiResponseOrganizationResponse;
};

export type GetOrganizationResponse = GetOrganizationResponses[keyof GetOrganizationResponses];

export type AcceptInvitationData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/accept-invitation';
};

export type AcceptInvitationErrors = {
    /**
     * No pending invitation found
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email not verified
     */
    403: unknown;
};

export type AcceptInvitationResponses = {
    /**
     * Invitation accepted successfully
     */
    200: ApiResponseString;
};

export type AcceptInvitationResponse = AcceptInvitationResponses[keyof AcceptInvitationResponses];

export type ListEventsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Page number (default: 1)
         */
        page?: number;
        /**
         * Items per page (default: 20, max: 100)
         */
        per_page?: number;
        /**
         * Filter by event type
         */
        event_type?: string;
        /**
         * Filter by user ID
         */
        user_id?: string;
        /**
         * Filter by ticket ID
         */
        ticket_id?: string;
        /**
         * Filter events from date (ISO 8601)
         */
        from_date?: string;
        /**
         * Filter events to date (ISO 8601)
         */
        to_date?: string;
    };
    url: '/api/v1/organizations/{org_id}/events';
};

export type ListEventsErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization or insufficient permissions
     */
    403: ErrorEnvelope;
};

export type ListEventsError = ListEventsErrors[keyof ListEventsErrors];

export type ListEventsResponses = {
    /**
     * Events retrieved successfully
     */
    200: ApiResponseVecEventLogResponse;
};

export type ListEventsResponse = ListEventsResponses[keyof ListEventsResponses];

export type CreateEventData = {
    body: CreateEventRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/events';
};

export type CreateEventErrors = {
    /**
     * Invalid input
     */
    400: ErrorEnvelope;
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
};

export type CreateEventError = CreateEventErrors[keyof CreateEventErrors];

export type CreateEventResponses = {
    /**
     * Event created successfully
     */
    201: ApiResponseEventLogResponse;
};

export type CreateEventResponse = CreateEventResponses[keyof CreateEventResponses];

export type ExportEventsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Export format (csv)
         */
        format?: string;
        /**
         * Filter by event type
         */
        event_type?: string;
        /**
         * Filter by user ID
         */
        user_id?: string;
        /**
         * Filter by ticket ID
         */
        ticket_id?: string;
        /**
         * Filter events from date (ISO 8601)
         */
        from_date?: string;
        /**
         * Filter events to date (ISO 8601)
         */
        to_date?: string;
    };
    url: '/api/v1/organizations/{org_id}/events/export';
};

export type ExportEventsErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization or insufficient permissions
     */
    403: ErrorEnvelope;
};

export type ExportEventsError = ExportEventsErrors[keyof ExportEventsErrors];

export type ExportEventsResponses = {
    /**
     * CSV export
     */
    200: string;
};

export type ExportEventsResponse = ExportEventsResponses[keyof ExportEventsResponses];

export type GetEventStatsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/events/stats';
};

export type GetEventStatsErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization or insufficient permissions
     */
    403: ErrorEnvelope;
};

export type GetEventStatsError = GetEventStatsErrors[keyof GetEventStatsErrors];

export type GetEventStatsResponses = {
    /**
     * Event statistics retrieved successfully
     */
    200: ApiResponseEventLogStats;
};

export type GetEventStatsResponse = GetEventStatsResponses[keyof GetEventStatsResponses];

export type StreamEventsData = {
    body?: never;
    headers?: {
        /**
         * Resume from event id
         */
        'Last-Event-Id'?: string | null;
    };
    path: {
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/events/stream';
};

export type StreamEventsResponses = {
    200: string;
};

export type StreamEventsResponse = StreamEventsResponses[keyof StreamEventsResponses];

export type WsEventsData = {
    body?: never;
    path: {
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/events/ws';
};

export type WsAuthData = {
    body?: never;
    path: {
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/events/ws/auth';
};

export type WsAuthResponses = {
    /**
     * WS endpoint URL and short-lived JWT
     */
    200: ApiResponseWsTokenResponse;
};

export type WsAuthResponse = WsAuthResponses[keyof WsAuthResponses];

export type GetEventData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Event ID
         */
        event_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/events/{event_id}';
};

export type GetEventErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization or insufficient permissions
     */
    403: ErrorEnvelope;
    /**
     * Event not found
     */
    404: ErrorEnvelope;
};

export type GetEventError = GetEventErrors[keyof GetEventErrors];

export type GetEventResponses = {
    /**
     * Event retrieved successfully
     */
    200: ApiResponseEventLogResponse;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type InviteUserData = {
    body: InviteUserRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/invite';
};

export type InviteUserErrors = {
    /**
     * Invalid input or user already member
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Organization admin access required
     */
    403: unknown;
    /**
     * User not found
     */
    404: unknown;
};

export type InviteUserResponses = {
    /**
     * User invited successfully
     */
    200: ApiResponseString;
};

export type InviteUserResponse = InviteUserResponses[keyof InviteUserResponses];

export type GetMembersData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/members';
};

export type GetMembersErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetMembersResponses = {
    /**
     * Organization members
     */
    200: ApiResponseVecMembershipResponse;
};

export type GetMembersResponse = GetMembersResponses[keyof GetMembersResponses];

export type RemoveMemberData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Member user ID
         */
        member_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/members/{member_id}';
};

export type RemoveMemberErrors = {
    /**
     * Cannot remove last admin
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Organization admin access required
     */
    403: unknown;
};

export type RemoveMemberResponses = {
    /**
     * Member removed successfully
     */
    200: ApiResponseString;
};

export type RemoveMemberResponse = RemoveMemberResponses[keyof RemoveMemberResponses];

export type UpdateMembershipData = {
    body: UpdateMembershipRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Member user ID
         */
        member_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/members/{member_id}';
};

export type UpdateMembershipErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Organization admin access required
     */
    403: unknown;
    /**
     * Member not found
     */
    404: unknown;
};

export type UpdateMembershipResponses = {
    /**
     * Membership updated successfully
     */
    200: ApiResponseString;
};

export type UpdateMembershipResponse = UpdateMembershipResponses[keyof UpdateMembershipResponses];

export type DeleteMessageData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/messages/{message_id}';
};

export type DeleteMessageErrors = {
    /**
     * Access denied to organization or insufficient permissions
     */
    403: ErrorEnvelope;
    /**
     * Message not found
     */
    404: ErrorEnvelope;
};

export type DeleteMessageError = DeleteMessageErrors[keyof DeleteMessageErrors];

export type DeleteMessageResponses = {
    /**
     * Message deleted successfully
     */
    204: void;
};

export type DeleteMessageResponse = DeleteMessageResponses[keyof DeleteMessageResponses];

export type GetMessageData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/messages/{message_id}';
};

export type GetMessageErrors = {
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Message not found
     */
    404: ErrorEnvelope;
};

export type GetMessageError = GetMessageErrors[keyof GetMessageErrors];

export type GetMessageResponses = {
    /**
     * Message details
     */
    200: ApiResponseMessageResponse;
};

export type GetMessageResponse = GetMessageResponses[keyof GetMessageResponses];

export type GetEffectivePermissionsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/permissions/effective';
};

export type GetEffectivePermissionsResponses = {
    /**
     * Effective permissions
     */
    200: ApiResponseEffectivePermissionsResponse;
};

export type GetEffectivePermissionsResponse = GetEffectivePermissionsResponses[keyof GetEffectivePermissionsResponses];

export type ListAgentsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/presence/agents';
};

export type ListAgentsResponses = {
    200: ApiResponseVecAgentPresence;
};

export type ListAgentsResponse = ListAgentsResponses[keyof ListAgentsResponses];

export type HeartbeatData = {
    body: PresenceHeartbeatRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/presence/heartbeat';
};

export type HeartbeatResponses = {
    /**
     * Heartbeat recorded
     */
    200: ApiResponsePresenceHeartbeatResponse;
};

export type HeartbeatResponse = HeartbeatResponses[keyof HeartbeatResponses];

export type ListRolesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/roles';
};

export type ListRolesResponses = {
    /**
     * List roles
     */
    200: ApiResponseVecRoleResponse;
};

export type ListRolesResponse = ListRolesResponses[keyof ListRolesResponses];

export type CreateRoleData = {
    body: CreateRoleRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/roles';
};

export type CreateRoleResponses = {
    /**
     * Role created
     */
    201: ApiResponseRoleResponse;
};

export type CreateRoleResponse = CreateRoleResponses[keyof CreateRoleResponses];

export type DeleteRoleData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/roles/{role_id}';
};

export type DeleteRoleResponses = {
    /**
     * Deleted
     */
    204: void;
};

export type DeleteRoleResponse = DeleteRoleResponses[keyof DeleteRoleResponses];

export type GetRoleData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/roles/{role_id}';
};

export type GetRoleResponses = {
    /**
     * Role
     */
    200: ApiResponseRoleResponse;
};

export type GetRoleResponse = GetRoleResponses[keyof GetRoleResponses];

export type UpdateRoleData = {
    body: UpdateRoleRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/roles/{role_id}';
};

export type UpdateRoleResponses = {
    /**
     * Updated
     */
    200: ApiResponseRoleResponse;
};

export type UpdateRoleResponse = UpdateRoleResponses[keyof UpdateRoleResponses];

export type AssignRoleData = {
    body: AssignRoleRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/roles/{role_id}/assign';
};

export type AssignRoleResponses = {
    /**
     * Assigned
     */
    200: ApiResponseString;
};

export type AssignRoleResponse = AssignRoleResponses[keyof AssignRoleResponses];

export type RevokeRoleData = {
    body: AssignRoleRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/roles/{role_id}/revoke';
};

export type RevokeRoleResponses = {
    /**
     * Revoked
     */
    200: ApiResponseString;
};

export type RevokeRoleResponse = RevokeRoleResponses[keyof RevokeRoleResponses];

export type GetAllOrganizationSettingsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/settings';
};

export type GetAllOrganizationSettingsErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetAllOrganizationSettingsResponses = {
    /**
     * All organization settings
     */
    200: ApiResponseVecOrganizationSettingResponse;
};

export type GetAllOrganizationSettingsResponse = GetAllOrganizationSettingsResponses[keyof GetAllOrganizationSettingsResponses];

export type SetOrganizationSettingData = {
    body: SetOrganizationSettingRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/settings';
};

export type SetOrganizationSettingErrors = {
    /**
     * Invalid input
     */
    400: unknown;
    /**
     * Organization admin access required
     */
    403: unknown;
};

export type SetOrganizationSettingResponses = {
    /**
     * Setting created/updated successfully
     */
    201: ApiResponseOrganizationSettingResponse;
};

export type SetOrganizationSettingResponse = SetOrganizationSettingResponses[keyof SetOrganizationSettingResponses];

export type ApplyDataRetentionData = {
    body?: never;
    path: {
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/settings/apply-retention';
};

export type ApplyDataRetentionResponses = {
    200: ApiResponseString;
};

export type ApplyDataRetentionResponse = ApplyDataRetentionResponses[keyof ApplyDataRetentionResponses];

export type GetOrgEffectiveSettingsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/settings/effective';
};

export type GetOrgEffectiveSettingsErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetOrgEffectiveSettingsResponses = {
    /**
     * Effective org settings (defaults + overrides)
     */
    200: ApiResponseVecEffectiveSettingResponse;
};

export type GetOrgEffectiveSettingsResponse = GetOrgEffectiveSettingsResponses[keyof GetOrgEffectiveSettingsResponses];

export type DeleteOrganizationSettingData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Setting key
         */
        key: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/settings/{key}';
};

export type DeleteOrganizationSettingErrors = {
    /**
     * Organization admin access required
     */
    403: unknown;
    /**
     * Setting not found
     */
    404: unknown;
};

export type DeleteOrganizationSettingResponses = {
    /**
     * Setting deleted successfully
     */
    204: void;
};

export type DeleteOrganizationSettingResponse = DeleteOrganizationSettingResponses[keyof DeleteOrganizationSettingResponses];

export type GetOrganizationSettingData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Setting key
         */
        key: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/settings/{key}';
};

export type GetOrganizationSettingErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetOrganizationSettingResponses = {
    /**
     * Setting value
     */
    200: ApiResponseOptionOrganizationSettingResponse;
};

export type GetOrganizationSettingResponse = GetOrganizationSettingResponses[keyof GetOrganizationSettingResponses];

export type CheckBreachesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/sla/check-breaches';
};

export type CheckBreachesResponses = {
    /**
     * OK
     */
    200: ApiResponseU64;
};

export type CheckBreachesResponse = CheckBreachesResponses[keyof CheckBreachesResponses];

export type CountdownSseData = {
    body?: never;
    path: {
        org_id: string;
    };
    query: {
        /**
         * If provided, stream only this ticket's countdowns
         */
        ticket_id: string;
    };
    url: '/api/v1/organizations/{org_id}/sla/countdown';
};

export type CountdownSseResponses = {
    /**
     * SSE stream of SLA countdowns
     */
    200: string;
};

export type CountdownSseResponse = CountdownSseResponses[keyof CountdownSseResponses];

export type ListPoliciesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/sla/policies';
};

export type ListPoliciesResponses = {
    /**
     * OK
     */
    200: ApiResponseVecSlaPolicyResponse;
};

export type ListPoliciesResponse = ListPoliciesResponses[keyof ListPoliciesResponses];

export type CreatePolicyData = {
    body: CreateSlaPolicyRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/sla/policies';
};

export type CreatePolicyResponses = {
    /**
     * Created
     */
    201: ApiResponseSlaPolicyResponse;
};

export type CreatePolicyResponse = CreatePolicyResponses[keyof CreatePolicyResponses];

export type UpdatePolicyData = {
    body: UpdateSlaPolicyRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Policy ID
         */
        policy_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/sla/policies/{policy_id}';
};

export type UpdatePolicyResponses = {
    /**
     * OK
     */
    200: ApiResponseSlaPolicyResponse;
};

export type UpdatePolicyResponse = UpdatePolicyResponses[keyof UpdatePolicyResponses];

export type SyncOpsData = {
    body: SyncOpsRequest;
    path: {
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/sync/ops';
};

export type SyncOpsResponses = {
    200: SyncOpsResponse;
};

export type SyncOpsResponse2 = SyncOpsResponses[keyof SyncOpsResponses];

export type SyncSnapshotData = {
    body?: never;
    path: {
        org_id: string;
    };
    query?: {
        types?: string;
        since?: number;
    };
    url: '/api/v1/organizations/{org_id}/sync/snapshot';
};

export type SyncSnapshotResponses = {
    200: SyncSnapshotResponse;
};

export type SyncSnapshotResponse2 = SyncSnapshotResponses[keyof SyncSnapshotResponses];

export type ListTagsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v1/organizations/{org_id}/tags';
};

export type ListTagsErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type ListTagsResponses = {
    /**
     * List of tags
     */
    200: ApiResponseVecTagResponse;
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type CreateTagData = {
    body: CreateTagRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tags';
};

export type CreateTagErrors = {
    /**
     * Invalid input or tag name already exists
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type CreateTagResponses = {
    /**
     * Tag created successfully
     */
    201: ApiResponseTagResponse;
};

export type CreateTagResponse = CreateTagResponses[keyof CreateTagResponses];

export type GetPopularTagsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Maximum number of tags to return
         */
        limit?: number;
    };
    url: '/api/v1/organizations/{org_id}/tags/popular';
};

export type GetPopularTagsErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetPopularTagsResponses = {
    /**
     * Popular tags by usage
     */
    200: ApiResponseVecTagResponse;
};

export type GetPopularTagsResponse = GetPopularTagsResponses[keyof GetPopularTagsResponses];

export type DeleteTagData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tags/{tag_id}';
};

export type DeleteTagErrors = {
    /**
     * Access denied to organization or insufficient permissions
     */
    403: unknown;
    /**
     * Tag not found
     */
    404: unknown;
};

export type DeleteTagResponses = {
    /**
     * Tag deleted successfully
     */
    204: void;
};

export type DeleteTagResponse = DeleteTagResponses[keyof DeleteTagResponses];

export type GetTagData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tags/{tag_id}';
};

export type GetTagErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Tag not found
     */
    404: unknown;
};

export type GetTagResponses = {
    /**
     * Tag details
     */
    200: ApiResponseTagResponse;
};

export type GetTagResponse = GetTagResponses[keyof GetTagResponses];

export type UpdateTagData = {
    body: UpdateTagRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tags/{tag_id}';
};

export type UpdateTagErrors = {
    /**
     * Tag name already exists
     */
    400: unknown;
    /**
     * Access denied to organization or insufficient permissions
     */
    403: unknown;
    /**
     * Tag not found
     */
    404: unknown;
};

export type UpdateTagResponses = {
    /**
     * Tag updated successfully
     */
    200: ApiResponseTagResponse;
};

export type UpdateTagResponse = UpdateTagResponses[keyof UpdateTagResponses];

export type GetTagWithTicketsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Tag ID
         */
        tag_id: string;
    };
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v1/organizations/{org_id}/tags/{tag_id}/tickets';
};

export type GetTagWithTicketsErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Tag not found
     */
    404: unknown;
};

export type GetTagWithTicketsResponses = {
    /**
     * Tag with associated tickets
     */
    200: ApiResponseTagWithTicketsResponse;
};

export type GetTagWithTicketsResponse = GetTagWithTicketsResponses[keyof GetTagWithTicketsResponses];

export type ListTeamsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/teams';
};

export type ListTeamsResponses = {
    /**
     * Teams
     */
    200: ApiResponseVecTeamResponse;
};

export type ListTeamsResponse = ListTeamsResponses[keyof ListTeamsResponses];

export type CreateTeamData = {
    body: CreateTeamRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/teams';
};

export type CreateTeamResponses = {
    /**
     * Team created
     */
    201: ApiResponseTeamResponse;
};

export type CreateTeamResponse = CreateTeamResponses[keyof CreateTeamResponses];

export type UpdateTeamData = {
    body: UpdateTeamRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/teams/{team_id}';
};

export type UpdateTeamResponses = {
    /**
     * Team updated
     */
    200: ApiResponseTeamResponse;
};

export type UpdateTeamResponse = UpdateTeamResponses[keyof UpdateTeamResponses];

export type ListMembersData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/teams/{team_id}/members';
};

export type ListMembersResponses = {
    /**
     * Members
     */
    200: ApiResponseVecTeamMemberResponse;
};

export type ListMembersResponse = ListMembersResponses[keyof ListMembersResponses];

export type AddMemberData = {
    body: AddMemberRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Team ID
         */
        team_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/teams/{team_id}/members';
};

export type AddMemberResponses = {
    /**
     * Member added
     */
    200: ApiResponseTeamMemberResponse;
};

export type AddMemberResponse = AddMemberResponses[keyof AddMemberResponses];

export type RemoveMember2Data = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Team ID
         */
        team_id: string;
        /**
         * User ID
         */
        member_user_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/teams/{team_id}/members/{member_user_id}';
};

export type RemoveMember2Responses = {
    /**
     * Member removed
     */
    204: void;
};

export type RemoveMember2Response = RemoveMember2Responses[keyof RemoveMember2Responses];

export type ListTicketsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Filter by ticket status (open, in_progress, resolved, closed)
         */
        status?: string;
        /**
         * Filter by priority level (low, medium, high, urgent)
         */
        priority?: string;
        /**
         * Filter by assigned user ID
         */
        assigned_to?: string;
        /**
         * Filter by creator user ID
         */
        created_by?: string;
        /**
         * Filter by tag IDs (comma-separated UUIDs)
         */
        tag_ids?: string;
        /**
         * Filter by created_at from (ISO 8601)
         */
        created_from?: string;
        /**
         * Filter by created_at to (ISO 8601)
         */
        created_to?: string;
        /**
         * Page number (default: 1)
         */
        page?: number;
        /**
         * Items per page (default: 20, max: 100)
         */
        per_page?: number;
    };
    url: '/api/v1/organizations/{org_id}/tickets';
};

export type ListTicketsErrors = {
    /**
     * Invalid filter parameters
     */
    400: ErrorEnvelope;
    /**
     * Authentication required
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Rate limited
     */
    429: ErrorEnvelope;
};

export type ListTicketsError = ListTicketsErrors[keyof ListTicketsErrors];

export type ListTicketsResponses = {
    /**
     * List of tickets retrieved successfully
     */
    200: ApiResponseVecTicketResponse;
};

export type ListTicketsResponse = ListTicketsResponses[keyof ListTicketsResponses];

export type CreateTicketData = {
    body: CreateTicketRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets';
};

export type CreateTicketErrors = {
    /**
     * Invalid input data or validation error
     */
    400: ErrorEnvelope;
    /**
     * Authentication required
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Validation error in request body
     */
    422: ErrorEnvelope;
    /**
     * Rate limited
     */
    429: ErrorEnvelope;
};

export type CreateTicketError = CreateTicketErrors[keyof CreateTicketErrors];

export type CreateTicketResponses = {
    /**
     * Ticket created successfully
     */
    201: ApiResponseTicketResponse;
};

export type CreateTicketResponse = CreateTicketResponses[keyof CreateTicketResponses];

export type BulkUpdateTicketsData = {
    body: BulkTicketUpdateRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/bulk';
};

export type BulkUpdateTicketsResponses = {
    /**
     * Tickets updated
     */
    200: unknown;
};

export type MergeTicketsData = {
    body: MergeTicketsRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/merge';
};

export type MergeTicketsResponses = {
    /**
     * Tickets merged
     */
    200: unknown;
};

export type SplitTicketData = {
    body: SplitTicketRequest;
    path: {
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/split';
};

export type SplitTicketResponses = {
    /**
     * Ticket split
     */
    200: ApiResponseString;
};

export type SplitTicketResponse = SplitTicketResponses[keyof SplitTicketResponses];

export type ListSavedViewsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/views';
};

export type ListSavedViewsResponses = {
    /**
     * Saved views
     */
    200: ApiResponseVecSavedViewResponse;
};

export type ListSavedViewsResponse = ListSavedViewsResponses[keyof ListSavedViewsResponses];

export type CreateSavedViewData = {
    body: SavedViewRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/views';
};

export type CreateSavedViewResponses = {
    /**
     * Saved view created
     */
    201: ApiResponseSavedViewResponse;
};

export type CreateSavedViewResponse = CreateSavedViewResponses[keyof CreateSavedViewResponses];

export type DeleteTicketData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}';
};

export type DeleteTicketErrors = {
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ErrorEnvelope;
};

export type DeleteTicketError = DeleteTicketErrors[keyof DeleteTicketErrors];

export type DeleteTicketResponses = {
    /**
     * Ticket deleted successfully
     */
    204: void;
};

export type DeleteTicketResponse = DeleteTicketResponses[keyof DeleteTicketResponses];

export type GetTicketData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}';
};

export type GetTicketErrors = {
    /**
     * Authentication required
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ErrorEnvelope;
};

export type GetTicketError = GetTicketErrors[keyof GetTicketErrors];

export type GetTicketResponses = {
    /**
     * Ticket details retrieved successfully
     */
    200: ApiResponseTicketResponse;
};

export type GetTicketResponse = GetTicketResponses[keyof GetTicketResponses];

export type UpdateTicketData = {
    body: UpdateTicketRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}';
};

export type UpdateTicketErrors = {
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ErrorEnvelope;
};

export type UpdateTicketError = UpdateTicketErrors[keyof UpdateTicketErrors];

export type UpdateTicketResponses = {
    /**
     * Ticket updated successfully
     */
    200: ApiResponseTicketResponse;
};

export type UpdateTicketResponse = UpdateTicketResponses[keyof UpdateTicketResponses];

export type AssignTicketTeamData = {
    body: AssignTeamRequest;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/assign-team';
};

export type AssignTicketTeamErrors = {
    /**
     * Forbidden
     */
    403: ErrorEnvelope;
    /**
     * Ticket or team not found
     */
    404: ErrorEnvelope;
};

export type AssignTicketTeamError = AssignTicketTeamErrors[keyof AssignTicketTeamErrors];

export type AssignTicketTeamResponses = {
    /**
     * Team assigned
     */
    200: ApiResponseTeamAssignmentResponse;
};

export type AssignTicketTeamResponse = AssignTicketTeamResponses[keyof AssignTicketTeamResponses];

export type ClearTicketTeamAssignmentData = {
    body?: never;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/assigned-team';
};

export type ClearTicketTeamAssignmentResponses = {
    /**
     * Cleared team assignment
     */
    204: void;
};

export type ClearTicketTeamAssignmentResponse = ClearTicketTeamAssignmentResponses[keyof ClearTicketTeamAssignmentResponses];

export type GetTicketTeamAssignmentData = {
    body?: never;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/assigned-team';
};

export type GetTicketTeamAssignmentResponses = {
    /**
     * Current team assignment (or null)
     */
    200: ApiResponseOptionTeamAssignmentResponse;
};

export type GetTicketTeamAssignmentResponse = GetTicketTeamAssignmentResponses[keyof GetTicketTeamAssignmentResponses];

export type DeleteDraftData = {
    body?: never;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/draft';
};

export type DeleteDraftResponses = {
    /**
     * Draft deleted
     */
    204: void;
};

export type DeleteDraftResponse = DeleteDraftResponses[keyof DeleteDraftResponses];

export type GetDraftData = {
    body?: never;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/draft';
};

export type GetDraftResponses = {
    /**
     * Draft fetched
     */
    200: ApiResponseOptionDraftResponse;
};

export type GetDraftResponse = GetDraftResponses[keyof GetDraftResponses];

export type UpsertDraftData = {
    body: UpsertDraftRequest;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/draft';
};

export type UpsertDraftResponses = {
    /**
     * Draft upserted
     */
    200: ApiResponseDraftResponse;
};

export type UpsertDraftResponse = UpsertDraftResponses[keyof UpsertDraftResponses];

export type GetTicketHistoryData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/history';
};

export type GetTicketHistoryErrors = {
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Ticket not found
     */
    404: unknown;
};

export type GetTicketHistoryResponses = {
    /**
     * Ticket history events
     */
    200: ApiResponseVecEventLogResponse;
};

export type GetTicketHistoryResponse = GetTicketHistoryResponses[keyof GetTicketHistoryResponses];

export type ReleaseTicketLockData = {
    body?: never;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/lock';
};

export type ReleaseTicketLockResponses = {
    /**
     * Ticket lock released
     */
    204: void;
};

export type ReleaseTicketLockResponse = ReleaseTicketLockResponses[keyof ReleaseTicketLockResponses];

export type LockTicketData = {
    body: LockRequest;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/lock';
};

export type LockTicketResponses = {
    /**
     * Ticket locked
     */
    200: unknown;
};

export type TakeoverTicketLockData = {
    body: LockRequest;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/lock/takeover';
};

export type TakeoverTicketLockResponses = {
    /**
     * Ticket lock taken over
     */
    200: unknown;
};

export type ListTicketMessagesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: {
        /**
         * Filter by channel
         */
        channel?: string;
        /**
         * Filter by sender user ID
         */
        sender_id?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages';
};

export type ListTicketMessagesErrors = {
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ErrorEnvelope;
};

export type ListTicketMessagesError = ListTicketMessagesErrors[keyof ListTicketMessagesErrors];

export type ListTicketMessagesResponses = {
    /**
     * List of messages
     */
    200: ApiResponseVecMessageResponse;
};

export type ListTicketMessagesResponse = ListTicketMessagesResponses[keyof ListTicketMessagesResponses];

export type CreateMessageData = {
    body: CreateMessageRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages';
};

export type CreateMessageErrors = {
    /**
     * Invalid input
     */
    400: ErrorEnvelope;
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ErrorEnvelope;
    /**
     * Rate limited
     */
    429: ErrorEnvelope;
};

export type CreateMessageError = CreateMessageErrors[keyof CreateMessageErrors];

export type CreateMessageResponses = {
    /**
     * Message created successfully
     */
    201: ApiResponseMessageResponse;
};

export type CreateMessageResponse = CreateMessageResponses[keyof CreateMessageResponses];

export type GetMessageCountData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/count';
};

export type GetMessageCountErrors = {
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ErrorEnvelope;
};

export type GetMessageCountError = GetMessageCountErrors[keyof GetMessageCountErrors];

export type GetMessageCountResponses = {
    /**
     * Message count
     */
    200: ApiResponseU64;
};

export type GetMessageCountResponse = GetMessageCountResponses[keyof GetMessageCountResponses];

export type CreateInternalNoteData = {
    body: CreateMessageRequest;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/internal';
};

export type CreateInternalNoteResponses = {
    /**
     * Internal note created
     */
    201: ApiResponseMessageResponse;
};

export type CreateInternalNoteResponse = CreateInternalNoteResponses[keyof CreateInternalNoteResponses];

export type GetLatestMessageData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/latest';
};

export type GetLatestMessageErrors = {
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ErrorEnvelope;
};

export type GetLatestMessageError = GetLatestMessageErrors[keyof GetLatestMessageErrors];

export type GetLatestMessageResponses = {
    /**
     * Latest message
     */
    200: ApiResponseOptionMessageResponse;
};

export type GetLatestMessageResponse = GetLatestMessageResponses[keyof GetLatestMessageResponses];

export type SearchMessagesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query: {
        /**
         * Search query
         */
        q: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/search';
};

export type SearchMessagesErrors = {
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ErrorEnvelope;
    /**
     * Rate limited
     */
    429: ErrorEnvelope;
};

export type SearchMessagesError = SearchMessagesErrors[keyof SearchMessagesErrors];

export type SearchMessagesResponses = {
    /**
     * Search results
     */
    200: ApiResponseVecMessageResponse;
};

export type SearchMessagesResponse = SearchMessagesResponses[keyof SearchMessagesResponses];

export type ListMessageAttachmentsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
        /**
         * Message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments';
};

export type ListMessageAttachmentsErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied
     */
    403: ErrorEnvelope;
    /**
     * Message not found
     */
    404: ErrorEnvelope;
    /**
     * Rate limited
     */
    429: ErrorEnvelope;
};

export type ListMessageAttachmentsError = ListMessageAttachmentsErrors[keyof ListMessageAttachmentsErrors];

export type ListMessageAttachmentsResponses = {
    /**
     * Attachments retrieved successfully
     */
    200: ApiResponseVecAttachmentResponse;
};

export type ListMessageAttachmentsResponse = ListMessageAttachmentsResponses[keyof ListMessageAttachmentsResponses];

export type UploadAttachmentsData = {
    /**
     * Files to upload
     */
    body?: unknown;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
        /**
         * Message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments';
};

export type UploadAttachmentsErrors = {
    /**
     * Invalid input or file type
     */
    400: ErrorEnvelope;
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied
     */
    403: ErrorEnvelope;
    /**
     * Message not found
     */
    404: ErrorEnvelope;
    /**
     * Rate limited
     */
    429: ErrorEnvelope;
};

export type UploadAttachmentsError = UploadAttachmentsErrors[keyof UploadAttachmentsErrors];

export type UploadAttachmentsResponses = {
    /**
     * Files uploaded successfully
     */
    201: ApiResponseUploadResponse;
};

export type UploadAttachmentsResponse = UploadAttachmentsResponses[keyof UploadAttachmentsResponses];

export type DeleteAttachmentData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
        /**
         * Message ID
         */
        message_id: string;
        /**
         * Attachment ID
         */
        attachment_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments/{attachment_id}';
};

export type DeleteAttachmentErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied
     */
    403: ErrorEnvelope;
    /**
     * Attachment not found
     */
    404: ErrorEnvelope;
};

export type DeleteAttachmentError = DeleteAttachmentErrors[keyof DeleteAttachmentErrors];

export type DeleteAttachmentResponses = {
    /**
     * Attachment deleted successfully
     */
    204: void;
};

export type DeleteAttachmentResponse = DeleteAttachmentResponses[keyof DeleteAttachmentResponses];

export type RemoveTagsFromTicketData = {
    body: TagManagementRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/tags';
};

export type RemoveTagsFromTicketErrors = {
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ErrorEnvelope;
};

export type RemoveTagsFromTicketError = RemoveTagsFromTicketErrors[keyof RemoveTagsFromTicketErrors];

export type RemoveTagsFromTicketResponses = {
    /**
     * Tags removed successfully
     */
    204: void;
};

export type RemoveTagsFromTicketResponse = RemoveTagsFromTicketResponses[keyof RemoveTagsFromTicketResponses];

export type AddTagsToTicketData = {
    body: TagManagementRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/tags';
};

export type AddTagsToTicketErrors = {
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ErrorEnvelope;
};

export type AddTagsToTicketError = AddTagsToTicketErrors[keyof AddTagsToTicketErrors];

export type AddTagsToTicketResponses = {
    /**
     * Tags added successfully
     */
    200: unknown;
};

export type ListTypingData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/typing';
};

export type ListTypingResponses = {
    200: ApiResponseTypingUsersResponse;
};

export type ListTypingResponse = ListTypingResponses[keyof ListTypingResponses];

export type TypingUpdateData = {
    body: TypingUpdateRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/typing';
};

export type TypingUpdateResponses = {
    200: ApiResponseString;
};

export type TypingUpdateResponse = TypingUpdateResponses[keyof TypingUpdateResponses];

export type ListTicketWatchersData = {
    body?: never;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/watchers';
};

export type ListTicketWatchersResponses = {
    /**
     * Watchers
     */
    200: ApiResponseVecWatcherResponse;
};

export type ListTicketWatchersResponse = ListTicketWatchersResponses[keyof ListTicketWatchersResponses];

export type AddTicketWatcherData = {
    body?: never;
    path: {
        org_id: string;
        ticket_id: string;
    };
    query: {
        /**
         * User to add as watcher
         */
        user_id: string;
    };
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/watchers';
};

export type AddTicketWatcherResponses = {
    /**
     * Watcher added
     */
    200: ApiResponseWatcherResponse;
};

export type AddTicketWatcherResponse = AddTicketWatcherResponses[keyof AddTicketWatcherResponses];

export type RemoveTicketWatcherData = {
    body?: never;
    path: {
        org_id: string;
        ticket_id: string;
        user_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/watchers/{user_id}';
};

export type RemoveTicketWatcherResponses = {
    /**
     * Watcher removed
     */
    204: void;
};

export type RemoveTicketWatcherResponse = RemoveTicketWatcherResponses[keyof RemoveTicketWatcherResponses];

export type ListCustomFieldsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/users/custom-fields';
};

export type ListCustomFieldsResponses = {
    200: ApiResponseVecUserCustomFieldResponse;
};

export type ListCustomFieldsResponse = ListCustomFieldsResponses[keyof ListCustomFieldsResponses];

export type CreateCustomFieldData = {
    body: CreateCustomFieldRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/users/custom-fields';
};

export type CreateCustomFieldResponses = {
    201: ApiResponseUserCustomFieldResponse;
};

export type CreateCustomFieldResponse = CreateCustomFieldResponses[keyof CreateCustomFieldResponses];

export type DeleteCustomFieldData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Custom field ID
         */
        field_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/users/custom-fields/{field_id}';
};

export type DeleteCustomFieldResponses = {
    204: void;
};

export type DeleteCustomFieldResponse = DeleteCustomFieldResponses[keyof DeleteCustomFieldResponses];

export type ListSegmentsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/users/segments';
};

export type ListSegmentsResponses = {
    200: ApiResponseVecSegmentResponse;
};

export type ListSegmentsResponse = ListSegmentsResponses[keyof ListSegmentsResponses];

export type CreateSegmentData = {
    body: CreateSegmentRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/users/segments';
};

export type CreateSegmentResponses = {
    201: ApiResponseSegmentResponse;
};

export type CreateSegmentResponse = CreateSegmentResponses[keyof CreateSegmentResponses];

export type DeleteSegmentData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Segment ID
         */
        segment_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/users/segments/{segment_id}';
};

export type DeleteSegmentResponses = {
    204: void;
};

export type DeleteSegmentResponse = DeleteSegmentResponses[keyof DeleteSegmentResponses];

export type UpdateSegmentData = {
    body: UpdateSegmentRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Segment ID
         */
        segment_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/users/segments/{segment_id}';
};

export type UpdateSegmentResponses = {
    200: ApiResponseSegmentResponse;
};

export type UpdateSegmentResponse = UpdateSegmentResponses[keyof UpdateSegmentResponses];

export type EvaluateSegmentData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Segment ID
         */
        segment_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/users/segments/{segment_id}/evaluate';
};

export type EvaluateSegmentResponses = {
    200: ApiResponseEvaluateSegmentResponse;
};

export type EvaluateSegmentResponse2 = EvaluateSegmentResponses[keyof EvaluateSegmentResponses];

export type GetUserCustomFieldsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Target user ID
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/users/{user_id}/custom-fields';
};

export type GetUserCustomFieldsResponses = {
    200: ApiResponseVecUserFieldValueResponse;
};

export type GetUserCustomFieldsResponse = GetUserCustomFieldsResponses[keyof GetUserCustomFieldsResponses];

export type SetUserCustomFieldsData = {
    body: SetUserCustomFieldValuesRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Target user ID
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/users/{user_id}/custom-fields';
};

export type SetUserCustomFieldsResponses = {
    200: ApiResponseString;
};

export type SetUserCustomFieldsResponse = SetUserCustomFieldsResponses[keyof SetUserCustomFieldsResponses];

export type ListWebhooksData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: {
        /**
         * Filter by enabled status
         */
        enabled?: boolean;
        /**
         * Filter by event type
         */
        event_type?: string;
        /**
         * Search by name
         */
        name_search?: string;
        /**
         * Search by URL
         */
        url_search?: string;
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
    };
    url: '/api/v1/organizations/{org_id}/webhooks';
};

export type ListWebhooksErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Rate limited
     */
    429: ErrorEnvelope;
};

export type ListWebhooksError = ListWebhooksErrors[keyof ListWebhooksErrors];

export type ListWebhooksResponses = {
    /**
     * Webhooks retrieved successfully
     */
    200: ApiResponseVecWebhookResponse;
};

export type ListWebhooksResponse = ListWebhooksResponses[keyof ListWebhooksResponses];

export type CreateWebhookData = {
    body: CreateWebhookRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/webhooks';
};

export type CreateWebhookErrors = {
    /**
     * Invalid request data
     */
    400: ErrorEnvelope;
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * Access denied to organization
     */
    403: ErrorEnvelope;
    /**
     * Rate limited
     */
    429: ErrorEnvelope;
};

export type CreateWebhookError = CreateWebhookErrors[keyof CreateWebhookErrors];

export type CreateWebhookResponses = {
    /**
     * Webhook created successfully
     */
    201: ApiResponseWebhookResponse;
};

export type CreateWebhookResponse = CreateWebhookResponses[keyof CreateWebhookResponses];

export type ListWebhookEventsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/webhooks/events';
};

export type ListWebhookEventsResponses = {
    /**
     * Available webhook events retrieved successfully
     */
    200: ApiResponseVecString;
};

export type ListWebhookEventsResponse = ListWebhookEventsResponses[keyof ListWebhookEventsResponses];

export type SendWebhooksData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query: {
        /**
         * Event type to trigger
         */
        event_type: string;
        /**
         * Ticket ID for context
         */
        ticket_id?: string;
        /**
         * User ID for context
         */
        user_id?: string;
    };
    url: '/api/v1/organizations/{org_id}/webhooks/send';
};

export type SendWebhooksErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type SendWebhooksResponses = {
    /**
     * Webhooks sent successfully
     */
    200: ApiResponseVecWebhookDelivery;
};

export type SendWebhooksResponse = SendWebhooksResponses[keyof SendWebhooksResponses];

export type GetWebhookStatsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/webhooks/stats';
};

export type GetWebhookStatsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
};

export type GetWebhookStatsResponses = {
    /**
     * Webhook statistics retrieved successfully
     */
    200: ApiResponseWebhookStats;
};

export type GetWebhookStatsResponse = GetWebhookStatsResponses[keyof GetWebhookStatsResponses];

export type DeleteWebhookData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Webhook ID
         */
        webhook_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/webhooks/{webhook_id}';
};

export type DeleteWebhookErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Webhook not found
     */
    404: unknown;
};

export type DeleteWebhookResponses = {
    /**
     * Webhook deleted successfully
     */
    204: void;
};

export type DeleteWebhookResponse = DeleteWebhookResponses[keyof DeleteWebhookResponses];

export type GetWebhookData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Webhook ID
         */
        webhook_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/webhooks/{webhook_id}';
};

export type GetWebhookErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Webhook not found
     */
    404: unknown;
};

export type GetWebhookResponses = {
    /**
     * Webhook retrieved successfully
     */
    200: ApiResponseWebhookResponse;
};

export type GetWebhookResponse = GetWebhookResponses[keyof GetWebhookResponses];

export type UpdateWebhookData = {
    body: UpdateWebhookRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Webhook ID
         */
        webhook_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/webhooks/{webhook_id}';
};

export type UpdateWebhookErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Webhook not found
     */
    404: unknown;
};

export type UpdateWebhookResponses = {
    /**
     * Webhook updated successfully
     */
    200: ApiResponseWebhookResponse;
};

export type UpdateWebhookResponse = UpdateWebhookResponses[keyof UpdateWebhookResponses];

export type TestWebhookData = {
    body: TestWebhookRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Webhook ID
         */
        webhook_id: string;
    };
    query?: never;
    url: '/api/v1/organizations/{org_id}/webhooks/{webhook_id}/test';
};

export type TestWebhookErrors = {
    /**
     * Invalid request data
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Access denied to organization
     */
    403: unknown;
    /**
     * Webhook not found
     */
    404: unknown;
};

export type TestWebhookResponses = {
    /**
     * Webhook test completed
     */
    200: ApiResponseWebhookTestResult;
};

export type TestWebhookResponse = TestWebhookResponses[keyof TestWebhookResponses];

export type GetPermissionsCatalogData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/permissions/catalog';
};

export type GetPermissionsCatalogResponses = {
    /**
     * Permission bitmask catalog
     */
    200: ApiResponseVecPermissionCatalogEntry;
};

export type GetPermissionsCatalogResponse = GetPermissionsCatalogResponses[keyof GetPermissionsCatalogResponses];

export type ListSessionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/sessions';
};

export type ListSessionsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type ListSessionsResponses = {
    /**
     * List of user sessions
     */
    200: ApiResponseSessionListResponse;
};

export type ListSessionsResponse = ListSessionsResponses[keyof ListSessionsResponses];

export type CleanupExpiredSessionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/sessions/cleanup';
};

export type CleanupExpiredSessionsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type CleanupExpiredSessionsResponses = {
    /**
     * Expired sessions cleaned up
     */
    200: unknown;
};

export type RevokeAllSessionsData = {
    body: RevokeAllSessionsRequest;
    path?: never;
    query?: never;
    url: '/api/v1/sessions/revoke-all';
};

export type RevokeAllSessionsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type RevokeAllSessionsResponses = {
    /**
     * Sessions revoked successfully
     */
    200: unknown;
};

export type GetSessionStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/sessions/stats';
};

export type GetSessionStatsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type GetSessionStatsResponses = {
    /**
     * Session statistics
     */
    200: ApiResponseSessionStats;
};

export type GetSessionStatsResponse = GetSessionStatsResponses[keyof GetSessionStatsResponses];

export type RevokeSessionData = {
    body?: never;
    path: {
        /**
         * Session ID
         */
        session_id: string;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}';
};

export type RevokeSessionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Session not found
     */
    404: unknown;
};

export type RevokeSessionResponses = {
    /**
     * Session revoked successfully
     */
    200: unknown;
};

export type GetSessionData = {
    body?: never;
    path: {
        /**
         * Session ID
         */
        session_id: string;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}';
};

export type GetSessionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Session not found
     */
    404: unknown;
};

export type GetSessionResponses = {
    /**
     * Session details
     */
    200: ApiResponseSessionInfo;
};

export type GetSessionResponse = GetSessionResponses[keyof GetSessionResponses];

export type ExtendSessionData = {
    body: ExtendSessionRequest;
    path: {
        /**
         * Session ID
         */
        session_id: string;
    };
    query?: never;
    url: '/api/v1/sessions/{session_id}/extend';
};

export type ExtendSessionErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Session not found
     */
    404: unknown;
};

export type ExtendSessionResponses = {
    /**
     * Session extended successfully
     */
    200: ApiResponseSessionInfo;
};

export type ExtendSessionResponse = ExtendSessionResponses[keyof ExtendSessionResponses];

export type GetSettingsCatalogData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/settings/catalog';
};

export type GetSettingsCatalogResponses = {
    /**
     * Available settings definitions
     */
    200: ApiResponseSettingsCatalogResponse;
};

export type GetSettingsCatalogResponse = GetSettingsCatalogResponses[keyof GetSettingsCatalogResponses];

export type DeleteAccountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/account';
};

export type DeleteAccountErrors = {
    /**
     * Cannot delete account
     */
    400: unknown;
    /**
     * Not authenticated
     */
    401: unknown;
};

export type DeleteAccountResponses = {
    /**
     * Account deleted successfully
     */
    204: void;
};

export type DeleteAccountResponse = DeleteAccountResponses[keyof DeleteAccountResponses];

export type ListApiKeysData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (default: 1)
         */
        page?: number;
        /**
         * Items per page (default: 20, max: 100)
         */
        per_page?: number;
        /**
         * Include revoked keys (default: false)
         */
        include_revoked?: boolean;
    };
    url: '/api/v1/users/api-keys';
};

export type ListApiKeysErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
};

export type ListApiKeysError = ListApiKeysErrors[keyof ListApiKeysErrors];

export type ListApiKeysResponses = {
    /**
     * API keys retrieved successfully
     */
    200: ApiResponseVecApiKeyResponse;
};

export type ListApiKeysResponse = ListApiKeysResponses[keyof ListApiKeysResponses];

export type CreateApiKeyData = {
    body: CreateApiKeyRequest;
    path?: never;
    query?: never;
    url: '/api/v1/users/api-keys';
};

export type CreateApiKeyErrors = {
    /**
     * Invalid input
     */
    400: ErrorEnvelope;
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
};

export type CreateApiKeyError = CreateApiKeyErrors[keyof CreateApiKeyErrors];

export type CreateApiKeyResponses = {
    /**
     * API key created successfully
     */
    201: ApiResponseCreateApiKeyResponse;
};

export type CreateApiKeyResponse2 = CreateApiKeyResponses[keyof CreateApiKeyResponses];

export type DeleteApiKeyData = {
    body?: never;
    path: {
        /**
         * API key ID
         */
        key_id: string;
    };
    query?: never;
    url: '/api/v1/users/api-keys/{key_id}';
};

export type DeleteApiKeyErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * API key not found
     */
    404: unknown;
};

export type DeleteApiKeyResponses = {
    /**
     * API key deleted successfully
     */
    204: void;
};

export type DeleteApiKeyResponse = DeleteApiKeyResponses[keyof DeleteApiKeyResponses];

export type GetApiKeyData = {
    body?: never;
    path: {
        /**
         * API key ID
         */
        key_id: string;
    };
    query?: never;
    url: '/api/v1/users/api-keys/{key_id}';
};

export type GetApiKeyErrors = {
    /**
     * Not authenticated
     */
    401: ErrorEnvelope;
    /**
     * API key not found
     */
    404: ErrorEnvelope;
};

export type GetApiKeyError = GetApiKeyErrors[keyof GetApiKeyErrors];

export type GetApiKeyResponses = {
    /**
     * API key retrieved successfully
     */
    200: ApiResponseApiKeyResponse;
};

export type GetApiKeyResponse = GetApiKeyResponses[keyof GetApiKeyResponses];

export type RevokeApiKeyData = {
    body?: never;
    path: {
        /**
         * API key ID
         */
        key_id: string;
    };
    query?: never;
    url: '/api/v1/users/api-keys/{key_id}/revoke';
};

export type RevokeApiKeyErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * API key not found
     */
    404: unknown;
};

export type RevokeApiKeyResponses = {
    /**
     * API key revoked successfully
     */
    200: ApiResponseString;
};

export type RevokeApiKeyResponse = RevokeApiKeyResponses[keyof RevokeApiKeyResponses];

export type GetLoginAttemptsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Maximum number of entries to return (1-100)
         */
        limit?: number;
    };
    url: '/api/v1/users/login-attempts';
};

export type GetLoginAttemptsErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email verification required
     */
    403: unknown;
};

export type GetLoginAttemptsResponses = {
    /**
     * Login attempts
     */
    200: ApiResponseVecLoginAttemptResponse;
};

export type GetLoginAttemptsResponse = GetLoginAttemptsResponses[keyof GetLoginAttemptsResponses];

export type GetLoginHistoryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Maximum number of entries to return (1-100)
         */
        limit?: number;
    };
    url: '/api/v1/users/login-history';
};

export type GetLoginHistoryErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
    /**
     * Email verification required
     */
    403: unknown;
};

export type GetLoginHistoryResponses = {
    /**
     * Login history
     */
    200: ApiResponseVecLoginHistoryResponse;
};

export type GetLoginHistoryResponse = GetLoginHistoryResponses[keyof GetLoginHistoryResponses];

export type ChangePasswordData = {
    body: ChangePasswordRequest;
    path?: never;
    query?: never;
    url: '/api/v1/users/password';
};

export type ChangePasswordErrors = {
    /**
     * Invalid current password
     */
    400: ErrorEnvelope;
    /**
     * Not authenticated
     */
    401: unknown;
};

export type ChangePasswordError = ChangePasswordErrors[keyof ChangePasswordErrors];

export type ChangePasswordResponses = {
    /**
     * Password changed successfully
     */
    200: ApiResponseString;
};

export type ChangePasswordResponse = ChangePasswordResponses[keyof ChangePasswordResponses];

export type GetProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/profile';
};

export type GetProfileErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
};

export type GetProfileResponses = {
    /**
     * User profile
     */
    200: ApiResponseUserProfileResponse;
};

export type GetProfileResponse = GetProfileResponses[keyof GetProfileResponses];

export type UpdateProfileData = {
    body: UpdateProfileRequest;
    path?: never;
    query?: never;
    url: '/api/v1/users/profile';
};

export type UpdateProfileErrors = {
    /**
     * Not authenticated
     */
    401: unknown;
};

export type UpdateProfileResponses = {
    /**
     * Profile updated successfully
     */
    200: ApiResponseUserProfileResponse;
};

export type UpdateProfileResponse = UpdateProfileResponses[keyof UpdateProfileResponses];

export type ClientOptions = {
    baseUrl: 'https://api.blckbox.dev' | 'https://staging.api.blckbox.dev' | 'http://localhost:8080' | (string & {});
};