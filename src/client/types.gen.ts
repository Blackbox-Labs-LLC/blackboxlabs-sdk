// This file is auto-generated by @hey-api/openapi-ts

export type AddMemberRequest = {
    user_id: string;
};

export type AddTagRequest = {
    color?: string | null;
    name?: string | null;
    tag_id?: string | null;
};

export type AddWatcherRequest = {
    user_id: string;
};

export type ApiError = {
    code: string;
    details?: unknown;
    message: string;
};

export type ApiErrorEnvelope = {
    error: ApiError;
    request_id?: string | null;
    success: boolean;
};

export type ApiKeyResponse = {
    created_at: string;
    expires_at?: string | null;
    id: string;
    last_used?: string | null;
    name: string;
    revoked: boolean;
    scopes: Array<string>;
};

export type AttachmentResponse = {
    content_type: string;
    file_name: string;
    file_size: number;
    id: string;
    uploaded_at: string;
    uploaded_by: string;
};

export type AuthResponse = {
    email_verified: boolean;
    organizations: Array<string>;
    session_token: string;
    two_fa_enabled: boolean;
    user_id: string;
};

export type ChangePasswordRequest = {
    current_password: string;
    new_password: string;
};

export type ClientMessageItem = {
    content: string;
    id: string;
    sent_at: string;
};

export type ClientTicketItem = {
    created_at: string;
    id: string;
    priority: string;
    status: string;
    subject: string;
};

export type CreateApiKeyRequest = {
    expires_in_days?: number | null;
    name: string;
    scopes: Array<string>;
};

export type CreateApiKeyResponse = {
    created_at: string;
    expires_at?: string | null;
    id: string;
    key: string;
    name: string;
    scopes: Array<string>;
};

export type CreateAttachmentRequest = {
    content_type: string;
    file_name: string;
    file_size: number;
    upload_id: string;
};

export type CreateMessageRequest = {
    channel?: string | null;
    content: string;
    visibility?: null | MessageVisibility;
};

export type CreateOrgRequest = {
    domain: string;
    name: string;
};

export type CreateRoleRequest = {
    color?: string | null;
    managed?: boolean | null;
    name: string;
    permissions: number;
    position?: number | null;
};

export type CreateTicketRequest = {
    description: string;
    priority?: null | Priority;
    subject?: string | null;
};

export type Disable2FaRequest = {
    user_id: string;
};

export type Enable2FaRequest = {
    code: string;
    secret: string;
    user_id: string;
};

export type ExtendSessionRequest = {
    days: number;
};

export type IdentifyContactRequest = {
    email?: string | null;
    external_id?: string | null;
    jwt?: string | null;
    name?: string | null;
    org_domain: string;
};

export type IdentifyContactResponse = {
    contact_id: string;
    expires_at: string;
    scopes: Array<string>;
    token: string;
};

export type LoginAttemptItem = {
    attempted_at: string;
    id: string;
    ip_address: string;
    success: boolean;
    user_agent: string;
};

export type LoginHistoryItem = {
    id: string;
    ip_address: string;
    logged_in_at: string;
    user_agent: string;
};

export type LoginRequest = {
    email: string;
    password: string;
    totp_code?: string | null;
};

export type MemberItem = {
    email: string;
    joined_at: string;
    name: string;
    status: string;
    user_id: string;
};

export type MessageItem = {
    content: string;
    id: string;
    sent_at: string;
    visibility: string;
};

export type MessageVisibility = 'public' | 'internal';

export type OrgItem = {
    id: string;
    name: string;
};

export type OrgSettingItem = {
    key: string;
    value: unknown;
};

export type OrgSettingsResponse = {
    organization_id: string;
    settings: Array<OrgSettingItem>;
};

export type Priority = 'low' | 'medium' | 'high' | 'urgent';

export type PublicClientConfig = {
    paddle_client_token: string;
    paddle_env: string;
};

export type RegisterRequest = {
    email: string;
    name: string;
    password: string;
};

export type RequestPasswordResetRequest = {
    email: string;
};

export type ResetPasswordRequest = {
    new_password: string;
    token: string;
};

export type RoleResponse = {
    color: string;
    created_at: string;
    id: string;
    managed: boolean;
    name: string;
    organization_id: string;
    permissions: number;
    position: number;
    updated_at: string;
};

export type SessionItem = {
    created_at: string;
    expires_at: string;
    id: string;
    ip_address: string;
    user_agent: string;
};

export type Setup2FaRequest = {
    issuer?: string | null;
    user_id: string;
};

export type Setup2FaResponse = {
    provisioning_uri: string;
    secret: string;
};

export type SignUploadRequest = {
    content_type: string;
    file_name: string;
    file_size: number;
};

export type TagItem = {
    color: string;
    id: string;
    name: string;
};

export type TicketItem = {
    created_at: string;
    id: string;
    priority: string;
    status: string;
    subject: string;
    updated_at: string;
};

export type TicketStatus = 'open' | 'pending' | 'resolved' | 'closed';

export type TicketSummary = {
    created_at: string;
    id: string;
    priority: Priority;
    status: TicketStatus;
    subject: string;
};

export type UpdateOrgRequest = {
    domain?: string | null;
    name?: string | null;
};

export type UpdateOrgSettingsRequest = {
    settings: Array<OrgSettingItem>;
};

export type UpdateProfileRequest = {
    email?: string | null;
    name?: string | null;
};

export type UpdateRoleRequest = {
    color?: string | null;
    name?: string | null;
    permissions?: number | null;
    position?: number | null;
};

export type UpdateTicketRequest = {
    assigned_to_user_id?: string | null;
    description?: string | null;
    priority?: string | null;
    status?: string | null;
    subject?: string | null;
};

export type UploadAvatarRequest = {
    content_type: string;
    file_name: string;
    file_size: number;
};

export type UploadAvatarResponse = {
    expires_at: string;
    upload_id: string;
    upload_url: string;
};

export type UploadSignResponse = {
    expires_at: string;
    upload_id: string;
    upload_url: string;
};

export type UserOrgMembership = {
    joined_at: string;
    organization_domain: string;
    organization_id: string;
    organization_name: string;
    status: string;
};

export type UserProfile = {
    created_at: string;
    email: string;
    email_verified: boolean;
    id: string;
    name: string;
    organizations: Array<UserOrgMembership>;
    two_fa_enabled: boolean;
};

export type VerifyEmailRequest = {
    token: string;
};

export type WatcherItem = {
    created_at: string;
    user_id: string;
};

export type ChangePasswordData = {
    body: ChangePasswordRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/change-password';
};

export type ChangePasswordErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
};

export type ChangePasswordError = ChangePasswordErrors[keyof ChangePasswordErrors];

export type ChangePasswordResponses = {
    /**
     * Password changed
     */
    200: unknown;
};

export type Disable2FaData = {
    body: Disable2FaRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/disable-2fa';
};

export type Disable2FaErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
};

export type Disable2FaError = Disable2FaErrors[keyof Disable2FaErrors];

export type Disable2FaResponses = {
    /**
     * 2FA disabled
     */
    200: unknown;
};

export type Enable2FaData = {
    body: Enable2FaRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/enable-2fa';
};

export type Enable2FaErrors = {
    /**
     * Invalid secret/code
     */
    400: ApiErrorEnvelope;
};

export type Enable2FaError = Enable2FaErrors[keyof Enable2FaErrors];

export type Enable2FaResponses = {
    /**
     * 2FA enabled
     */
    200: unknown;
};

export type LoginData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type LoginErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Unauthorized or 2FA required/invalid
     */
    401: ApiErrorEnvelope;
};

export type LoginError = LoginErrors[keyof LoginErrors];

export type LoginResponses = {
    /**
     * Login successful
     */
    200: AuthResponse;
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/logout';
};

export type LogoutErrors = {
    /**
     * Missing/invalid token
     */
    401: ApiErrorEnvelope;
};

export type LogoutError = LogoutErrors[keyof LogoutErrors];

export type LogoutResponses = {
    /**
     * Logout successful
     */
    200: unknown;
};

export type RegisterData = {
    body: RegisterRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/register';
};

export type RegisterErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Email already exists
     */
    409: ApiErrorEnvelope;
};

export type RegisterError = RegisterErrors[keyof RegisterErrors];

export type RegisterResponses = {
    /**
     * Registration successful
     */
    200: AuthResponse;
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type RequestPasswordResetData = {
    body: RequestPasswordResetRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/request-password-reset';
};

export type RequestPasswordResetErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
};

export type RequestPasswordResetError = RequestPasswordResetErrors[keyof RequestPasswordResetErrors];

export type RequestPasswordResetResponses = {
    /**
     * Token created (email sent if account exists)
     */
    200: unknown;
};

export type ResetPasswordData = {
    body: ResetPasswordRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/reset-password';
};

export type ResetPasswordErrors = {
    /**
     * Invalid/expired token
     */
    400: ApiErrorEnvelope;
};

export type ResetPasswordError = ResetPasswordErrors[keyof ResetPasswordErrors];

export type ResetPasswordResponses = {
    /**
     * Password reset
     */
    200: unknown;
};

export type ListSessionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/sessions';
};

export type ListSessionsResponses = {
    /**
     * OK
     */
    200: Array<SessionItem>;
};

export type ListSessionsResponse = ListSessionsResponses[keyof ListSessionsResponses];

export type RevokeAllSessionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/sessions/revoke-all';
};

export type RevokeAllSessionsResponses = {
    /**
     * Revoked
     */
    200: unknown;
};

export type RevokeSessionData = {
    body?: never;
    path: {
        /**
         * Session ID
         */
        session_id: string;
    };
    query?: never;
    url: '/api/v1/auth/sessions/{session_id}';
};

export type RevokeSessionResponses = {
    /**
     * Revoked
     */
    200: unknown;
};

export type ExtendSessionData = {
    body: ExtendSessionRequest;
    path: {
        /**
         * Session ID
         */
        session_id: string;
    };
    query?: never;
    url: '/api/v1/auth/sessions/{session_id}/extend';
};

export type ExtendSessionResponses = {
    /**
     * Extended
     */
    200: unknown;
};

export type Setup2FaData = {
    body: Setup2FaRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/setup-2fa';
};

export type Setup2FaErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
};

export type Setup2FaError = Setup2FaErrors[keyof Setup2FaErrors];

export type Setup2FaResponses = {
    /**
     * 2FA secret generated
     */
    200: Setup2FaResponse;
};

export type Setup2FaResponse2 = Setup2FaResponses[keyof Setup2FaResponses];

export type VerifyEmailData = {
    body: VerifyEmailRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/verify-email';
};

export type VerifyEmailErrors = {
    /**
     * Invalid/expired token
     */
    400: ApiErrorEnvelope;
};

export type VerifyEmailError = VerifyEmailErrors[keyof VerifyEmailErrors];

export type VerifyEmailResponses = {
    /**
     * Email verified
     */
    200: unknown;
};

export type GetConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/client/config';
};

export type GetConfigResponses = {
    /**
     * OK
     */
    200: PublicClientConfig;
};

export type GetConfigResponse = GetConfigResponses[keyof GetConfigResponses];

export type IdentifyContactData = {
    body: IdentifyContactRequest;
    path?: never;
    query?: never;
    url: '/api/v1/client/identify';
};

export type IdentifyContactResponses = {
    /**
     * Identified
     */
    200: IdentifyContactResponse;
};

export type IdentifyContactResponse2 = IdentifyContactResponses[keyof IdentifyContactResponses];

export type CreateTicketContactData = {
    body: CreateTicketRequest;
    path?: never;
    query?: never;
    url: '/api/v1/client/tickets';
};

export type CreateTicketContactResponses = {
    /**
     * Created
     */
    200: TicketSummary;
};

export type CreateTicketContactResponse = CreateTicketContactResponses[keyof CreateTicketContactResponses];

export type GetTicketContactData = {
    body?: never;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/client/tickets/{ticket_id}';
};

export type GetTicketContactErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetTicketContactResponses = {
    /**
     * OK
     */
    200: ClientTicketItem;
};

export type GetTicketContactResponse = GetTicketContactResponses[keyof GetTicketContactResponses];

export type ListMessagesContactData = {
    body?: never;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/client/tickets/{ticket_id}/messages';
};

export type ListMessagesContactResponses = {
    /**
     * OK
     */
    200: Array<ClientMessageItem>;
};

export type ListMessagesContactResponse = ListMessagesContactResponses[keyof ListMessagesContactResponses];

export type PostMessageContactData = {
    body: CreateMessageRequest;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/client/tickets/{ticket_id}/messages';
};

export type PostMessageContactResponses = {
    /**
     * Created
     */
    200: string;
};

export type PostMessageContactResponse = PostMessageContactResponses[keyof PostMessageContactResponses];

export type ListOrgsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/orgs';
};

export type ListOrgsResponses = {
    /**
     * OK
     */
    200: Array<OrgItem>;
};

export type ListOrgsResponse = ListOrgsResponses[keyof ListOrgsResponses];

export type CreateOrgData = {
    body: CreateOrgRequest;
    path?: never;
    query?: never;
    url: '/api/v1/orgs';
};

export type CreateOrgResponses = {
    /**
     * Created
     */
    201: OrgItem;
};

export type CreateOrgResponse = CreateOrgResponses[keyof CreateOrgResponses];

export type DeleteOrgData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}';
};

export type DeleteOrgErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Organization not found
     */
    404: ApiErrorEnvelope;
};

export type DeleteOrgError = DeleteOrgErrors[keyof DeleteOrgErrors];

export type DeleteOrgResponses = {
    /**
     * Organization deleted
     */
    200: unknown;
};

export type GetOrgData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}';
};

export type GetOrgErrors = {
    /**
     * Not found
     */
    404: unknown;
};

export type GetOrgResponses = {
    /**
     * OK
     */
    200: OrgItem;
};

export type GetOrgResponse = GetOrgResponses[keyof GetOrgResponses];

export type UpdateOrgData = {
    body: UpdateOrgRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}';
};

export type UpdateOrgErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Organization not found
     */
    404: ApiErrorEnvelope;
};

export type UpdateOrgError = UpdateOrgErrors[keyof UpdateOrgErrors];

export type UpdateOrgResponses = {
    /**
     * Organization updated
     */
    200: unknown;
};

export type ListMembersData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/members';
};

export type ListMembersErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type ListMembersResponses = {
    /**
     * OK
     */
    200: Array<MemberItem>;
};

export type ListMembersResponse = ListMembersResponses[keyof ListMembersResponses];

export type AddMemberData = {
    body: AddMemberRequest;
    path?: never;
    query?: never;
    url: '/api/v1/orgs/{org_id}/members';
};

export type AddMemberErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type AddMemberResponses = {
    /**
     * Added
     */
    200: unknown;
};

export type RemoveMemberData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/orgs/{org_id}/members/{user_id}';
};

export type RemoveMemberErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
};

export type RemoveMemberResponses = {
    /**
     * Removed
     */
    200: unknown;
};

export type CreateAttachmentData = {
    body: CreateAttachmentRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/messages/{message_id}/attachments';
};

export type CreateAttachmentErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Organization or message not found
     */
    404: ApiErrorEnvelope;
};

export type CreateAttachmentError = CreateAttachmentErrors[keyof CreateAttachmentErrors];

export type CreateAttachmentResponses = {
    /**
     * Attachment created
     */
    201: AttachmentResponse;
};

export type CreateAttachmentResponse = CreateAttachmentResponses[keyof CreateAttachmentResponses];

export type DownloadAttachmentData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Message ID
         */
        message_id: string;
        /**
         * Attachment ID
         */
        attachment_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/messages/{message_id}/attachments/{attachment_id}/download';
};

export type DownloadAttachmentErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Attachment or message not found
     */
    404: ApiErrorEnvelope;
};

export type DownloadAttachmentError = DownloadAttachmentErrors[keyof DownloadAttachmentErrors];

export type DownloadAttachmentResponses = {
    /**
     * File download
     */
    200: Blob | File;
};

export type DownloadAttachmentResponse = DownloadAttachmentResponses[keyof DownloadAttachmentResponses];

export type SignUploadData = {
    body: SignUploadRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Message ID
         */
        message_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/messages/{message_id}/uploads/sign';
};

export type SignUploadErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Organization or message not found
     */
    404: ApiErrorEnvelope;
};

export type SignUploadError = SignUploadErrors[keyof SignUploadErrors];

export type SignUploadResponses = {
    /**
     * Upload URL generated
     */
    200: UploadSignResponse;
};

export type SignUploadResponse = SignUploadResponses[keyof SignUploadResponses];

export type ListRolesData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/roles';
};

export type ListRolesErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Organization not found
     */
    404: ApiErrorEnvelope;
};

export type ListRolesError = ListRolesErrors[keyof ListRolesErrors];

export type ListRolesResponses = {
    /**
     * Roles retrieved
     */
    200: Array<RoleResponse>;
};

export type ListRolesResponse = ListRolesResponses[keyof ListRolesResponses];

export type CreateRoleData = {
    body: CreateRoleRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/roles';
};

export type CreateRoleErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Organization not found
     */
    404: ApiErrorEnvelope;
};

export type CreateRoleError = CreateRoleErrors[keyof CreateRoleErrors];

export type CreateRoleResponses = {
    /**
     * Role created
     */
    200: RoleResponse;
};

export type CreateRoleResponse = CreateRoleResponses[keyof CreateRoleResponses];

export type DeleteRoleData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/roles/{role_id}';
};

export type DeleteRoleErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Role not found
     */
    404: ApiErrorEnvelope;
};

export type DeleteRoleError = DeleteRoleErrors[keyof DeleteRoleErrors];

export type DeleteRoleResponses = {
    /**
     * Role deleted
     */
    200: unknown;
};

export type GetRoleData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/roles/{role_id}';
};

export type GetRoleErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Role not found
     */
    404: ApiErrorEnvelope;
};

export type GetRoleError = GetRoleErrors[keyof GetRoleErrors];

export type GetRoleResponses = {
    /**
     * Role retrieved
     */
    200: RoleResponse;
};

export type GetRoleResponse = GetRoleResponses[keyof GetRoleResponses];

export type UpdateRoleData = {
    body: UpdateRoleRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/roles/{role_id}';
};

export type UpdateRoleErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Role not found
     */
    404: ApiErrorEnvelope;
};

export type UpdateRoleError = UpdateRoleErrors[keyof UpdateRoleErrors];

export type UpdateRoleResponses = {
    /**
     * Role updated
     */
    200: RoleResponse;
};

export type UpdateRoleResponse = UpdateRoleResponses[keyof UpdateRoleResponses];

export type AssignRoleData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Role ID
         */
        role_id: string;
        /**
         * User ID
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/roles/{role_id}/assign/{user_id}';
};

export type AssignRoleErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Role or user not found
     */
    404: ApiErrorEnvelope;
};

export type AssignRoleError = AssignRoleErrors[keyof AssignRoleErrors];

export type AssignRoleResponses = {
    /**
     * Role assigned
     */
    200: unknown;
};

export type UnassignRoleData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
        /**
         * Role ID
         */
        role_id: string;
        /**
         * User ID
         */
        user_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/roles/{role_id}/unassign/{user_id}';
};

export type UnassignRoleErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Role or user not found
     */
    404: ApiErrorEnvelope;
};

export type UnassignRoleError = UnassignRoleErrors[keyof UnassignRoleErrors];

export type UnassignRoleResponses = {
    /**
     * Role unassigned
     */
    200: unknown;
};

export type GetOrgSettingsData = {
    body?: never;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/settings';
};

export type GetOrgSettingsErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Organization not found
     */
    404: ApiErrorEnvelope;
};

export type GetOrgSettingsError = GetOrgSettingsErrors[keyof GetOrgSettingsErrors];

export type GetOrgSettingsResponses = {
    /**
     * Settings retrieved
     */
    200: OrgSettingsResponse;
};

export type GetOrgSettingsResponse = GetOrgSettingsResponses[keyof GetOrgSettingsResponses];

export type UpdateOrgSettingsData = {
    body: UpdateOrgSettingsRequest;
    path: {
        /**
         * Organization ID
         */
        org_id: string;
    };
    query?: never;
    url: '/api/v1/orgs/{org_id}/settings';
};

export type UpdateOrgSettingsErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Forbidden
     */
    403: ApiErrorEnvelope;
    /**
     * Organization not found
     */
    404: ApiErrorEnvelope;
};

export type UpdateOrgSettingsError = UpdateOrgSettingsErrors[keyof UpdateOrgSettingsErrors];

export type UpdateOrgSettingsResponses = {
    /**
     * Settings updated
     */
    200: unknown;
};

export type ListTicketsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Filter by status
         */
        status: string;
        /**
         * Filter by assigned_to_user_id
         */
        assignee: string;
        /**
         * Page number (1-based)
         */
        page: number;
        /**
         * Items per page
         */
        per_page: number;
    };
    url: '/api/v1/tickets';
};

export type ListTicketsResponses = {
    /**
     * Tickets
     */
    200: Array<TicketItem>;
};

export type ListTicketsResponse = ListTicketsResponses[keyof ListTicketsResponses];

export type CreateTicketData = {
    body: CreateTicketRequest;
    path?: never;
    query?: never;
    url: '/api/v1/tickets';
};

export type CreateTicketErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
};

export type CreateTicketError = CreateTicketErrors[keyof CreateTicketErrors];

export type CreateTicketResponses = {
    /**
     * Created
     */
    200: TicketSummary;
};

export type CreateTicketResponse = CreateTicketResponses[keyof CreateTicketResponses];

export type GetTicketData = {
    body?: never;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/tickets/{ticket_id}';
};

export type GetTicketErrors = {
    /**
     * Not found
     */
    404: ApiErrorEnvelope;
};

export type GetTicketError = GetTicketErrors[keyof GetTicketErrors];

export type GetTicketResponses = {
    /**
     * Ticket
     */
    200: TicketItem;
};

export type GetTicketResponse = GetTicketResponses[keyof GetTicketResponses];

export type UpdateTicketData = {
    body: UpdateTicketRequest;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/tickets/{ticket_id}';
};

export type UpdateTicketErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Not found
     */
    404: ApiErrorEnvelope;
};

export type UpdateTicketError = UpdateTicketErrors[keyof UpdateTicketErrors];

export type UpdateTicketResponses = {
    /**
     * Updated
     */
    200: TicketItem;
};

export type UpdateTicketResponse = UpdateTicketResponses[keyof UpdateTicketResponses];

export type ListMessagesData = {
    body?: never;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query: {
        /**
         * Include internal messages
         */
        include_internal: boolean;
    };
    url: '/api/v1/tickets/{ticket_id}/messages';
};

export type ListMessagesErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
};

export type ListMessagesError = ListMessagesErrors[keyof ListMessagesErrors];

export type ListMessagesResponses = {
    /**
     * Messages
     */
    200: Array<MessageItem>;
};

export type ListMessagesResponse = ListMessagesResponses[keyof ListMessagesResponses];

export type PostMessageData = {
    body: CreateMessageRequest;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/tickets/{ticket_id}/messages';
};

export type PostMessageErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
};

export type PostMessageError = PostMessageErrors[keyof PostMessageErrors];

export type PostMessageResponses = {
    /**
     * Created
     */
    200: string;
};

export type PostMessageResponse = PostMessageResponses[keyof PostMessageResponses];

export type ListTagsData = {
    body?: never;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/tickets/{ticket_id}/tags';
};

export type ListTagsResponses = {
    /**
     * OK
     */
    200: Array<TagItem>;
};

export type ListTagsResponse = ListTagsResponses[keyof ListTagsResponses];

export type AddTagData = {
    body: AddTagRequest;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/tickets/{ticket_id}/tags';
};

export type AddTagErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Ticket not found
     */
    404: ApiErrorEnvelope;
};

export type AddTagError = AddTagErrors[keyof AddTagErrors];

export type AddTagResponses = {
    /**
     * Tag added
     */
    200: unknown;
};

export type RemoveTagData = {
    body?: never;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
        /**
         * Tag ID
         */
        tag_id: string;
    };
    query?: never;
    url: '/api/v1/tickets/{ticket_id}/tags/{tag_id}';
};

export type RemoveTagResponses = {
    /**
     * Tag removed
     */
    200: unknown;
};

export type ListWatchersData = {
    body?: never;
    path: {
        /**
         * Ticket ID
         */
        ticket_id: string;
    };
    query?: never;
    url: '/api/v1/tickets/{ticket_id}/watchers';
};

export type ListWatchersResponses = {
    /**
     * OK
     */
    200: Array<WatcherItem>;
};

export type ListWatchersResponse = ListWatchersResponses[keyof ListWatchersResponses];

export type AddWatcherData = {
    body: AddWatcherRequest;
    path?: never;
    query?: never;
    url: '/api/v1/tickets/{ticket_id}/watchers';
};

export type AddWatcherResponses = {
    /**
     * Watcher added
     */
    200: unknown;
};

export type RemoveWatcherData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/tickets/{ticket_id}/watchers/{user_id}';
};

export type RemoveWatcherResponses = {
    /**
     * Watcher removed
     */
    200: unknown;
};

export type ListApiKeysData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number
         */
        page?: number;
        /**
         * Items per page
         */
        per_page?: number;
        /**
         * Include revoked keys
         */
        include_revoked?: boolean;
    };
    url: '/api/v1/users/api-keys';
};

export type ListApiKeysErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
};

export type ListApiKeysError = ListApiKeysErrors[keyof ListApiKeysErrors];

export type ListApiKeysResponses = {
    /**
     * API keys retrieved
     */
    200: Array<ApiKeyResponse>;
};

export type ListApiKeysResponse = ListApiKeysResponses[keyof ListApiKeysResponses];

export type CreateApiKeyData = {
    body: CreateApiKeyRequest;
    path?: never;
    query?: never;
    url: '/api/v1/users/api-keys';
};

export type CreateApiKeyErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
};

export type CreateApiKeyError = CreateApiKeyErrors[keyof CreateApiKeyErrors];

export type CreateApiKeyResponses = {
    /**
     * API key created
     */
    200: CreateApiKeyResponse;
};

export type CreateApiKeyResponse2 = CreateApiKeyResponses[keyof CreateApiKeyResponses];

export type DeleteApiKeyData = {
    body?: never;
    path: {
        /**
         * API key ID
         */
        key_id: string;
    };
    query?: never;
    url: '/api/v1/users/api-keys/{key_id}';
};

export type DeleteApiKeyErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * API key not found
     */
    404: ApiErrorEnvelope;
};

export type DeleteApiKeyError = DeleteApiKeyErrors[keyof DeleteApiKeyErrors];

export type DeleteApiKeyResponses = {
    /**
     * API key deleted
     */
    200: unknown;
};

export type GetApiKeyData = {
    body?: never;
    path: {
        /**
         * API key ID
         */
        key_id: string;
    };
    query?: never;
    url: '/api/v1/users/api-keys/{key_id}';
};

export type GetApiKeyErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * API key not found
     */
    404: ApiErrorEnvelope;
};

export type GetApiKeyError = GetApiKeyErrors[keyof GetApiKeyErrors];

export type GetApiKeyResponses = {
    /**
     * API key retrieved
     */
    200: ApiKeyResponse;
};

export type GetApiKeyResponse = GetApiKeyResponses[keyof GetApiKeyResponses];

export type RevokeApiKeyData = {
    body?: never;
    path: {
        /**
         * API key ID
         */
        key_id: string;
    };
    query?: never;
    url: '/api/v1/users/api-keys/{key_id}/revoke';
};

export type RevokeApiKeyErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * API key not found
     */
    404: ApiErrorEnvelope;
};

export type RevokeApiKeyError = RevokeApiKeyErrors[keyof RevokeApiKeyErrors];

export type RevokeApiKeyResponses = {
    /**
     * API key revoked
     */
    200: unknown;
};

export type UploadAvatarData = {
    body: UploadAvatarRequest;
    path?: never;
    query?: never;
    url: '/api/v1/users/avatar/upload';
};

export type UploadAvatarErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
};

export type UploadAvatarError = UploadAvatarErrors[keyof UploadAvatarErrors];

export type UploadAvatarResponses = {
    /**
     * Upload URL generated
     */
    200: UploadAvatarResponse;
};

export type UploadAvatarResponse2 = UploadAvatarResponses[keyof UploadAvatarResponses];

export type GetLoginAttemptsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Maximum number of entries to return
         */
        limit?: number;
    };
    url: '/api/v1/users/login-attempts';
};

export type GetLoginAttemptsErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
};

export type GetLoginAttemptsError = GetLoginAttemptsErrors[keyof GetLoginAttemptsErrors];

export type GetLoginAttemptsResponses = {
    /**
     * Login attempts retrieved
     */
    200: Array<LoginAttemptItem>;
};

export type GetLoginAttemptsResponse = GetLoginAttemptsResponses[keyof GetLoginAttemptsResponses];

export type GetLoginHistoryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Maximum number of entries to return
         */
        limit?: number;
    };
    url: '/api/v1/users/login-history';
};

export type GetLoginHistoryErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
};

export type GetLoginHistoryError = GetLoginHistoryErrors[keyof GetLoginHistoryErrors];

export type GetLoginHistoryResponses = {
    /**
     * Login history retrieved
     */
    200: Array<LoginHistoryItem>;
};

export type GetLoginHistoryResponse = GetLoginHistoryResponses[keyof GetLoginHistoryResponses];

export type ChangePassword2Data = {
    body: ChangePasswordRequest;
    path?: never;
    query?: never;
    url: '/api/v1/users/password';
};

export type ChangePassword2Errors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Unauthorized or invalid current password
     */
    401: ApiErrorEnvelope;
};

export type ChangePassword2Error = ChangePassword2Errors[keyof ChangePassword2Errors];

export type ChangePassword2Responses = {
    /**
     * Password changed
     */
    200: unknown;
};

export type GetProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/profile';
};

export type GetProfileErrors = {
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
};

export type GetProfileError = GetProfileErrors[keyof GetProfileErrors];

export type GetProfileResponses = {
    /**
     * Profile retrieved
     */
    200: UserProfile;
};

export type GetProfileResponse = GetProfileResponses[keyof GetProfileResponses];

export type UpdateProfileData = {
    body: UpdateProfileRequest;
    path?: never;
    query?: never;
    url: '/api/v1/users/profile';
};

export type UpdateProfileErrors = {
    /**
     * Invalid input
     */
    400: ApiErrorEnvelope;
    /**
     * Unauthorized
     */
    401: ApiErrorEnvelope;
    /**
     * Email already exists
     */
    409: ApiErrorEnvelope;
};

export type UpdateProfileError = UpdateProfileErrors[keyof UpdateProfileErrors];

export type UpdateProfileResponses = {
    /**
     * Profile updated
     */
    200: UserProfile;
};

export type UpdateProfileResponse = UpdateProfileResponses[keyof UpdateProfileResponses];

export type ClientOptions = {
    baseUrl: 'https://api.blckbox.dev' | (string & {});
};