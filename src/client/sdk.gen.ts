// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ChangePasswordData, ChangePasswordResponses, ChangePasswordErrors, Disable2FaData, Disable2FaResponses, Disable2FaErrors, Enable2FaData, Enable2FaResponses, Enable2FaErrors, LoginData, LoginResponses, LoginErrors, LogoutData, LogoutResponses, LogoutErrors, RegisterData, RegisterResponses, RegisterErrors, RequestPasswordResetData, RequestPasswordResetResponses, RequestPasswordResetErrors, ResetPasswordData, ResetPasswordResponses, ResetPasswordErrors, ListSessionsData, ListSessionsResponses, RevokeAllSessionsData, RevokeAllSessionsResponses, RevokeSessionData, RevokeSessionResponses, ExtendSessionData, ExtendSessionResponses, Setup2FaData, Setup2FaResponses, Setup2FaErrors, VerifyEmailData, VerifyEmailResponses, VerifyEmailErrors, GetConfigData, GetConfigResponses, IdentifyContactData, IdentifyContactResponses, CreateTicketContactData, CreateTicketContactResponses, GetTicketContactData, GetTicketContactResponses, GetTicketContactErrors, ListMessagesContactData, ListMessagesContactResponses, PostMessageContactData, PostMessageContactResponses, ListOrgsData, ListOrgsResponses, CreateOrgData, CreateOrgResponses, GetOrgData, GetOrgResponses, GetOrgErrors, ListMembersData, ListMembersResponses, ListMembersErrors, AddMemberData, AddMemberResponses, AddMemberErrors, RemoveMemberData, RemoveMemberResponses, RemoveMemberErrors, ListTicketsData, ListTicketsResponses, CreateTicketData, CreateTicketResponses, CreateTicketErrors, GetTicketData, GetTicketResponses, GetTicketErrors, UpdateTicketData, UpdateTicketResponses, UpdateTicketErrors, ListMessagesData, ListMessagesResponses, ListMessagesErrors, PostMessageData, PostMessageResponses, PostMessageErrors, ListTagsData, ListTagsResponses, AddTagData, AddTagResponses, AddTagErrors, RemoveTagData, RemoveTagResponses, ListWatchersData, ListWatchersResponses, AddWatcherData, AddWatcherResponses, RemoveWatcherData, RemoveWatcherResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Change password
 * Change password for the current user.
 */
export const changePassword = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChangePasswordResponses, ChangePasswordErrors, ThrowOnError>({
        url: '/api/v1/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Disable 2FA
 * Disable 2FA for the user.
 */
export const disable2Fa = <ThrowOnError extends boolean = false>(options: Options<Disable2FaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Disable2FaResponses, Disable2FaErrors, ThrowOnError>({
        url: '/api/v1/auth/disable-2fa',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Enable 2FA
 * Confirm TOTP code to enable 2FA for the user.
 */
export const enable2Fa = <ThrowOnError extends boolean = false>(options: Options<Enable2FaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Enable2FaResponses, Enable2FaErrors, ThrowOnError>({
        url: '/api/v1/auth/enable-2fa',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Agent login
 * Authenticate an agent by email/password. If 2FA is enabled, include a valid `totp_code`. Returns a new session token.
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout
 * Revoke the current session token. Requires `Authorization: Bearer <token>`.
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, LogoutErrors, ThrowOnError>({
        url: '/api/v1/auth/logout',
        ...options
    });
};

/**
 * Agent registration
 * Create a new agent account and start a session. Also issues an email verification token.
 */
export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterResponses, RegisterErrors, ThrowOnError>({
        url: '/api/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request password reset
 * Create a one-time password reset token and deliver it via email.
 */
export const requestPasswordReset = <ThrowOnError extends boolean = false>(options: Options<RequestPasswordResetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestPasswordResetResponses, RequestPasswordResetErrors, ThrowOnError>({
        url: '/api/v1/auth/request-password-reset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset password
 * Reset password using a one-time token.
 */
export const resetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetPasswordResponses, ResetPasswordErrors, ThrowOnError>({
        url: '/api/v1/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List sessions
 * List active sessions for the current user.
 */
export const listSessions = <ThrowOnError extends boolean = false>(options?: Options<ListSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSessionsResponses, unknown, ThrowOnError>({
        url: '/api/v1/auth/sessions',
        ...options
    });
};

/**
 * Revoke all sessions
 * Revoke all active sessions for the current user.
 */
export const revokeAllSessions = <ThrowOnError extends boolean = false>(options?: Options<RevokeAllSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RevokeAllSessionsResponses, unknown, ThrowOnError>({
        url: '/api/v1/auth/sessions/revoke-all',
        ...options
    });
};

/**
 * Revoke a session
 * Revoke an active session (owner only).
 */
export const revokeSession = <ThrowOnError extends boolean = false>(options: Options<RevokeSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RevokeSessionResponses, unknown, ThrowOnError>({
        url: '/api/v1/auth/sessions/{session_id}',
        ...options
    });
};

/**
 * Extend a session
 * Extend the session expiration by a number of days (owner only).
 */
export const extendSession = <ThrowOnError extends boolean = false>(options: Options<ExtendSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExtendSessionResponses, unknown, ThrowOnError>({
        url: '/api/v1/auth/sessions/{session_id}/extend',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Setup 2FA (TOTP)
 * Generate a TOTP secret and provisioning URI (otpauth://). Requires an authenticated agent context.
 */
export const setup2Fa = <ThrowOnError extends boolean = false>(options: Options<Setup2FaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Setup2FaResponses, Setup2FaErrors, ThrowOnError>({
        url: '/api/v1/auth/setup-2fa',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify email
 * Verify an email address using a verification token.
 */
export const verifyEmail = <ThrowOnError extends boolean = false>(options: Options<VerifyEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyEmailResponses, VerifyEmailErrors, ThrowOnError>({
        url: '/api/v1/auth/verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Public client config
 */
export const getConfig = <ThrowOnError extends boolean = false>(options?: Options<GetConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigResponses, unknown, ThrowOnError>({
        url: '/api/v1/client/config',
        ...options
    });
};

/**
 * Identify or create contact and issue token
 */
export const identifyContact = <ThrowOnError extends boolean = false>(options: Options<IdentifyContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IdentifyContactResponses, unknown, ThrowOnError>({
        url: '/api/v1/client/identify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create ticket (contact)
 * Create a ticket on behalf of an identified contact. Requires Authorization: Bearer <contact_jwt>.
 */
export const createTicketContact = <ThrowOnError extends boolean = false>(options: Options<CreateTicketContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTicketContactResponses, unknown, ThrowOnError>({
        url: '/api/v1/client/tickets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get ticket (contact)
 */
export const getTicketContact = <ThrowOnError extends boolean = false>(options: Options<GetTicketContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketContactResponses, GetTicketContactErrors, ThrowOnError>({
        url: '/api/v1/client/tickets/{ticket_id}',
        ...options
    });
};

/**
 * List messages (contact)
 */
export const listMessagesContact = <ThrowOnError extends boolean = false>(options: Options<ListMessagesContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMessagesContactResponses, unknown, ThrowOnError>({
        url: '/api/v1/client/tickets/{ticket_id}/messages',
        ...options
    });
};

/**
 * Post message (contact)
 */
export const postMessageContact = <ThrowOnError extends boolean = false>(options: Options<PostMessageContactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMessageContactResponses, unknown, ThrowOnError>({
        url: '/api/v1/client/tickets/{ticket_id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List organizations
 */
export const listOrgs = <ThrowOnError extends boolean = false>(options?: Options<ListOrgsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListOrgsResponses, unknown, ThrowOnError>({
        url: '/api/v1/orgs',
        ...options
    });
};

/**
 * Create organization
 */
export const createOrg = <ThrowOnError extends boolean = false>(options: Options<CreateOrgData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrgResponses, unknown, ThrowOnError>({
        url: '/api/v1/orgs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get organization
 */
export const getOrg = <ThrowOnError extends boolean = false>(options: Options<GetOrgData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrgResponses, GetOrgErrors, ThrowOnError>({
        url: '/api/v1/orgs/{org_id}',
        ...options
    });
};

/**
 * List organization members
 */
export const listMembers = <ThrowOnError extends boolean = false>(options: Options<ListMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMembersResponses, ListMembersErrors, ThrowOnError>({
        url: '/api/v1/orgs/{org_id}/members',
        ...options
    });
};

/**
 * Add organization member
 */
export const addMember = <ThrowOnError extends boolean = false>(options: Options<AddMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMemberResponses, AddMemberErrors, ThrowOnError>({
        url: '/api/v1/orgs/{org_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove organization member
 */
export const removeMember = <ThrowOnError extends boolean = false>(options?: Options<RemoveMemberData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<RemoveMemberResponses, RemoveMemberErrors, ThrowOnError>({
        url: '/api/v1/orgs/{org_id}/members/{user_id}',
        ...options
    });
};

/**
 * List tickets
 * List tickets for an organization.
 */
export const listTickets = <ThrowOnError extends boolean = false>(options: Options<ListTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTicketsResponses, unknown, ThrowOnError>({
        url: '/api/v1/tickets',
        ...options
    });
};

/**
 * Create ticket (agent)
 * Create a ticket on behalf of an agent. Requires Authorization or headers.
 */
export const createTicket = <ThrowOnError extends boolean = false>(options: Options<CreateTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTicketResponses, CreateTicketErrors, ThrowOnError>({
        url: '/api/v1/tickets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get ticket
 */
export const getTicket = <ThrowOnError extends boolean = false>(options: Options<GetTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketResponses, GetTicketErrors, ThrowOnError>({
        url: '/api/v1/tickets/{ticket_id}',
        ...options
    });
};

/**
 * Update ticket
 * Partial update of a ticket's fields.
 */
export const updateTicket = <ThrowOnError extends boolean = false>(options: Options<UpdateTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTicketResponses, UpdateTicketErrors, ThrowOnError>({
        url: '/api/v1/tickets/{ticket_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List messages
 * List messages for a ticket. Agents can include internal messages via query.
 */
export const listMessages = <ThrowOnError extends boolean = false>(options: Options<ListMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMessagesResponses, ListMessagesErrors, ThrowOnError>({
        url: '/api/v1/tickets/{ticket_id}/messages',
        ...options
    });
};

/**
 * Create message (agent)
 * Post a message to a ticket as an agent. Requires headers: X-User-Id.
 */
export const postMessage = <ThrowOnError extends boolean = false>(options: Options<PostMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostMessageResponses, PostMessageErrors, ThrowOnError>({
        url: '/api/v1/tickets/{ticket_id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List tags on ticket
 */
export const listTags = <ThrowOnError extends boolean = false>(options: Options<ListTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTagsResponses, unknown, ThrowOnError>({
        url: '/api/v1/tickets/{ticket_id}/tags',
        ...options
    });
};

/**
 * Add tag to ticket
 * Adds an existing tag by id or creates one by name within the ticket's organization.
 */
export const addTag = <ThrowOnError extends boolean = false>(options: Options<AddTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddTagResponses, AddTagErrors, ThrowOnError>({
        url: '/api/v1/tickets/{ticket_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove tag from ticket
 */
export const removeTag = <ThrowOnError extends boolean = false>(options: Options<RemoveTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveTagResponses, unknown, ThrowOnError>({
        url: '/api/v1/tickets/{ticket_id}/tags/{tag_id}',
        ...options
    });
};

/**
 * List ticket watchers
 */
export const listWatchers = <ThrowOnError extends boolean = false>(options: Options<ListWatchersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListWatchersResponses, unknown, ThrowOnError>({
        url: '/api/v1/tickets/{ticket_id}/watchers',
        ...options
    });
};

/**
 * Add ticket watcher
 */
export const addWatcher = <ThrowOnError extends boolean = false>(options: Options<AddWatcherData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddWatcherResponses, unknown, ThrowOnError>({
        url: '/api/v1/tickets/{ticket_id}/watchers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove ticket watcher
 */
export const removeWatcher = <ThrowOnError extends boolean = false>(options?: Options<RemoveWatcherData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<RemoveWatcherResponses, unknown, ThrowOnError>({
        url: '/api/v1/tickets/{ticket_id}/watchers/{user_id}',
        ...options
    });
};