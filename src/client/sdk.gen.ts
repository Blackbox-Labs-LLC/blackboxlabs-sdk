// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { GetAttachmentStatsData, GetAttachmentStatsResponses, GetAttachmentStatsErrors, DownloadAttachmentData, DownloadAttachmentResponses, DownloadAttachmentErrors, Disable2FaData, Disable2FaResponses, Disable2FaErrors, Enable2FaData, Enable2FaResponses, Enable2FaErrors, LoginData, LoginResponses, LoginErrors, LogoutData, LogoutResponses, LogoutErrors, RegisterData, RegisterResponses, RegisterErrors, RequestPasswordResetData, RequestPasswordResetResponses, RequestPasswordResetErrors, ResendVerificationData, ResendVerificationResponses, ResendVerificationErrors, ResetPasswordData, ResetPasswordResponses, ResetPasswordErrors, Setup2FaData, Setup2FaResponses, Setup2FaErrors, VerifyEmailData, VerifyEmailResponses, VerifyEmailErrors, CreateCheckoutData, CreateCheckoutResponses, CreateCheckoutErrors, CreateAdjustmentData, CreateAdjustmentResponses, RefundPaymentData, RefundPaymentResponses, GetPublicConfigData, GetPublicConfigResponses, GetSubscriptionData, GetSubscriptionResponses, GetSubscriptionErrors, ListSubscriptionsData, ListSubscriptionsResponses, CreateSubscriptionData, CreateSubscriptionResponses, ChangeSubscriptionData, ChangeSubscriptionResponses, CancelSubscriptionData, CancelSubscriptionResponses, ResumeSubscriptionData, ResumeSubscriptionResponses, PaddleWebhookData, PaddleWebhookResponses, PaddleWebhookErrors, IdentifyUserData, IdentifyUserResponses, IdentifyUserErrors, SendMessageData, SendMessageResponses, SendMessageErrors, GetTicketHistoryPublicData, GetTicketHistoryPublicResponses, GetTicketHistoryPublicErrors, GetUserTicketsData, GetUserTicketsResponses, GetUserTicketsErrors, GetUserOrganizationsData, GetUserOrganizationsResponses, GetUserOrganizationsErrors, CreateOrganizationData, CreateOrganizationResponses, CreateOrganizationErrors, FindOrganizationsByEmailDomainData, FindOrganizationsByEmailDomainResponses, FindOrganizationsByEmailDomainErrors, JoinOrganizationData, JoinOrganizationResponses, JoinOrganizationErrors, GetOrganizationData, GetOrganizationResponses, GetOrganizationErrors, AcceptInvitationData, AcceptInvitationResponses, AcceptInvitationErrors, ListEventsData, ListEventsResponses, ListEventsErrors, CreateEventData, CreateEventResponses, CreateEventErrors, ExportEventsData, ExportEventsResponses, ExportEventsErrors, GetEventStatsData, GetEventStatsResponses, GetEventStatsErrors, StreamEventsData, StreamEventsResponses, WsEventsData, WsAuthData, WsAuthResponses, GetEventData, GetEventResponses, GetEventErrors, InviteUserData, InviteUserResponses, InviteUserErrors, GetMembersData, GetMembersResponses, GetMembersErrors, RemoveMemberData, RemoveMemberResponses, RemoveMemberErrors, UpdateMembershipData, UpdateMembershipResponses, UpdateMembershipErrors, DeleteMessageData, DeleteMessageResponses, DeleteMessageErrors, GetMessageData, GetMessageResponses, GetMessageErrors, GetEffectivePermissionsData, GetEffectivePermissionsResponses, ListAgentsData, ListAgentsResponses, HeartbeatData, HeartbeatResponses, ListRolesData, ListRolesResponses, CreateRoleData, CreateRoleResponses, DeleteRoleData, DeleteRoleResponses, GetRoleData, GetRoleResponses, UpdateRoleData, UpdateRoleResponses, AssignRoleData, AssignRoleResponses, RevokeRoleData, RevokeRoleResponses, GetAllOrganizationSettingsData, GetAllOrganizationSettingsResponses, GetAllOrganizationSettingsErrors, SetOrganizationSettingData, SetOrganizationSettingResponses, SetOrganizationSettingErrors, ApplyDataRetentionData, ApplyDataRetentionResponses, GetOrgEffectiveSettingsData, GetOrgEffectiveSettingsResponses, GetOrgEffectiveSettingsErrors, DeleteOrganizationSettingData, DeleteOrganizationSettingResponses, DeleteOrganizationSettingErrors, GetOrganizationSettingData, GetOrganizationSettingResponses, GetOrganizationSettingErrors, CheckBreachesData, CheckBreachesResponses, CountdownSseData, CountdownSseResponses, ListPoliciesData, ListPoliciesResponses, CreatePolicyData, CreatePolicyResponses, UpdatePolicyData, UpdatePolicyResponses, SyncOpsData, SyncOpsResponses, SyncSnapshotData, SyncSnapshotResponses, ListTagsData, ListTagsResponses, ListTagsErrors, CreateTagData, CreateTagResponses, CreateTagErrors, GetPopularTagsData, GetPopularTagsResponses, GetPopularTagsErrors, DeleteTagData, DeleteTagResponses, DeleteTagErrors, GetTagData, GetTagResponses, GetTagErrors, UpdateTagData, UpdateTagResponses, UpdateTagErrors, GetTagWithTicketsData, GetTagWithTicketsResponses, GetTagWithTicketsErrors, ListTeamsData, ListTeamsResponses, CreateTeamData, CreateTeamResponses, UpdateTeamData, UpdateTeamResponses, ListMembersData, ListMembersResponses, AddMemberData, AddMemberResponses, RemoveMember2Data, RemoveMember2Responses, ListTicketsData, ListTicketsResponses, ListTicketsErrors, CreateTicketData, CreateTicketResponses, CreateTicketErrors, BulkUpdateTicketsData, BulkUpdateTicketsResponses, MergeTicketsData, MergeTicketsResponses, SplitTicketData, SplitTicketResponses, ListSavedViewsData, ListSavedViewsResponses, CreateSavedViewData, CreateSavedViewResponses, DeleteTicketData, DeleteTicketResponses, DeleteTicketErrors, GetTicketData, GetTicketResponses, GetTicketErrors, UpdateTicketData, UpdateTicketResponses, UpdateTicketErrors, AssignTicketTeamData, AssignTicketTeamResponses, AssignTicketTeamErrors, ClearTicketTeamAssignmentData, ClearTicketTeamAssignmentResponses, GetTicketTeamAssignmentData, GetTicketTeamAssignmentResponses, DeleteDraftData, DeleteDraftResponses, GetDraftData, GetDraftResponses, UpsertDraftData, UpsertDraftResponses, GetTicketHistoryData, GetTicketHistoryResponses, GetTicketHistoryErrors, ReleaseTicketLockData, ReleaseTicketLockResponses, LockTicketData, LockTicketResponses, TakeoverTicketLockData, TakeoverTicketLockResponses, ListTicketMessagesData, ListTicketMessagesResponses, ListTicketMessagesErrors, CreateMessageData, CreateMessageResponses, CreateMessageErrors, GetMessageCountData, GetMessageCountResponses, GetMessageCountErrors, CreateInternalNoteData, CreateInternalNoteResponses, GetLatestMessageData, GetLatestMessageResponses, GetLatestMessageErrors, SearchMessagesData, SearchMessagesResponses, SearchMessagesErrors, ListMessageAttachmentsData, ListMessageAttachmentsResponses, ListMessageAttachmentsErrors, UploadAttachmentsData, UploadAttachmentsResponses, UploadAttachmentsErrors, DeleteAttachmentData, DeleteAttachmentResponses, DeleteAttachmentErrors, RemoveTagsFromTicketData, RemoveTagsFromTicketResponses, RemoveTagsFromTicketErrors, AddTagsToTicketData, AddTagsToTicketResponses, AddTagsToTicketErrors, ListTypingData, ListTypingResponses, TypingUpdateData, TypingUpdateResponses, ListTicketWatchersData, ListTicketWatchersResponses, AddTicketWatcherData, AddTicketWatcherResponses, RemoveTicketWatcherData, RemoveTicketWatcherResponses, ListCustomFieldsData, ListCustomFieldsResponses, CreateCustomFieldData, CreateCustomFieldResponses, DeleteCustomFieldData, DeleteCustomFieldResponses, ListSegmentsData, ListSegmentsResponses, CreateSegmentData, CreateSegmentResponses, DeleteSegmentData, DeleteSegmentResponses, UpdateSegmentData, UpdateSegmentResponses, EvaluateSegmentData, EvaluateSegmentResponses, GetUserCustomFieldsData, GetUserCustomFieldsResponses, SetUserCustomFieldsData, SetUserCustomFieldsResponses, ListWebhooksData, ListWebhooksResponses, ListWebhooksErrors, CreateWebhookData, CreateWebhookResponses, CreateWebhookErrors, ListWebhookEventsData, ListWebhookEventsResponses, SendWebhooksData, SendWebhooksResponses, SendWebhooksErrors, GetWebhookStatsData, GetWebhookStatsResponses, GetWebhookStatsErrors, DeleteWebhookData, DeleteWebhookResponses, DeleteWebhookErrors, GetWebhookData, GetWebhookResponses, GetWebhookErrors, UpdateWebhookData, UpdateWebhookResponses, UpdateWebhookErrors, TestWebhookData, TestWebhookResponses, TestWebhookErrors, GetPermissionsCatalogData, GetPermissionsCatalogResponses, ListSessionsData, ListSessionsResponses, ListSessionsErrors, CleanupExpiredSessionsData, CleanupExpiredSessionsResponses, CleanupExpiredSessionsErrors, RevokeAllSessionsData, RevokeAllSessionsResponses, RevokeAllSessionsErrors, GetSessionStatsData, GetSessionStatsResponses, GetSessionStatsErrors, RevokeSessionData, RevokeSessionResponses, RevokeSessionErrors, GetSessionData, GetSessionResponses, GetSessionErrors, ExtendSessionData, ExtendSessionResponses, ExtendSessionErrors, GetSettingsCatalogData, GetSettingsCatalogResponses, DeleteAccountData, DeleteAccountResponses, DeleteAccountErrors, ListApiKeysData, ListApiKeysResponses, ListApiKeysErrors, CreateApiKeyData, CreateApiKeyResponses, CreateApiKeyErrors, DeleteApiKeyData, DeleteApiKeyResponses, DeleteApiKeyErrors, GetApiKeyData, GetApiKeyResponses, GetApiKeyErrors, RevokeApiKeyData, RevokeApiKeyResponses, RevokeApiKeyErrors, GetLoginAttemptsData, GetLoginAttemptsResponses, GetLoginAttemptsErrors, GetLoginHistoryData, GetLoginHistoryResponses, GetLoginHistoryErrors, ChangePasswordData, ChangePasswordResponses, ChangePasswordErrors, GetProfileData, GetProfileResponses, GetProfileErrors, UpdateProfileData, UpdateProfileResponses, UpdateProfileErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getAttachmentStats = <ThrowOnError extends boolean = false>(options?: Options<GetAttachmentStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAttachmentStatsResponses, GetAttachmentStatsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/attachments/stats',
        ...options
    });
};

export const downloadAttachment = <ThrowOnError extends boolean = false>(options: Options<DownloadAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadAttachmentResponses, DownloadAttachmentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/attachments/{attachment_id}/download',
        ...options
    });
};

/**
 * Disable 2FA
 * Disable TOTP-based 2FA for the authenticated user.
 */
export const disable2Fa = <ThrowOnError extends boolean = false>(options?: Options<Disable2FaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<Disable2FaResponses, Disable2FaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/disable-2fa',
        ...options
    });
};

/**
 * Enable 2FA
 * Enable TOTP-based 2FA for the authenticated user.
 */
export const enable2Fa = <ThrowOnError extends boolean = false>(options: Options<Enable2FaData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<Enable2FaResponses, Enable2FaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/enable-2fa',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login
 * Authenticate a user and establish a session. Provide TOTP code if 2FA is enabled.
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout
 * Invalidate the current session and clear the auth cookie.
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, LogoutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/logout',
        ...options
    });
};

/**
 * Register a new user
 * Create a user account and start a session. Email verification is required.
 */
export const register = <ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterResponses, RegisterErrors, ThrowOnError>({
        url: '/api/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request password reset
 * Send a password reset email to the given address if it exists.
 */
export const requestPasswordReset = <ThrowOnError extends boolean = false>(options: Options<RequestPasswordResetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RequestPasswordResetResponses, RequestPasswordResetErrors, ThrowOnError>({
        url: '/api/v1/auth/request-password-reset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Resend verification email
 * Resend email verification code, with rate limiting.
 */
export const resendVerification = <ThrowOnError extends boolean = false>(options: Options<ResendVerificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResendVerificationResponses, ResendVerificationErrors, ThrowOnError>({
        url: '/api/v1/auth/resend-verification',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset password
 * Reset the password using a token sent via email.
 */
export const resetPassword = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetPasswordResponses, ResetPasswordErrors, ThrowOnError>({
        url: '/api/v1/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Setup 2FA
 * Initiate time-based one-time password (TOTP) setup and return secret and backup codes.
 */
export const setup2Fa = <ThrowOnError extends boolean = false>(options?: Options<Setup2FaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<Setup2FaResponses, Setup2FaErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/setup-2fa',
        ...options
    });
};

/**
 * Verify email
 * Verify the user's email address using a token.
 */
export const verifyEmail = <ThrowOnError extends boolean = false>(options: Options<VerifyEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyEmailResponses, VerifyEmailErrors, ThrowOnError>({
        url: '/api/v1/auth/verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create Paddle checkout
 * Creates a Paddle payment link for the given price. Optionally associates the link to a customer and organization. Use the returned URL to redirect the user to checkout.
 */
export const createCheckout = <ThrowOnError extends boolean = false>(options: Options<CreateCheckoutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCheckoutResponses, CreateCheckoutErrors, ThrowOnError>({
        url: '/api/v1/billing/checkout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create invoice adjustment
 * Creates a credit or debit adjustment for the specified invoice.
 */
export const createAdjustment = <ThrowOnError extends boolean = false>(options: Options<CreateAdjustmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAdjustmentResponses, unknown, ThrowOnError>({
        url: '/api/v1/billing/invoices/{id}/adjustments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refund a payment
 * Requests a refund for a given payment. Amount can be full or partial.
 */
export const refundPayment = <ThrowOnError extends boolean = false>(options: Options<RefundPaymentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefundPaymentResponses, unknown, ThrowOnError>({
        url: '/api/v1/billing/payments/refund',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Public billing configuration
 * Returns Paddle client token and environment for Paddle.js initialization.
 */
export const getPublicConfig = <ThrowOnError extends boolean = false>(options?: Options<GetPublicConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPublicConfigResponses, unknown, ThrowOnError>({
        url: '/api/v1/billing/public-config',
        ...options
    });
};

/**
 * Get latest subscription snapshot for primary org
 * Returns a lightweight snapshot of the organization's latest subscription, or `status=none` if none exists.
 */
export const getSubscription = <ThrowOnError extends boolean = false>(options?: Options<GetSubscriptionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSubscriptionResponses, GetSubscriptionErrors, ThrowOnError>({
        url: '/api/v1/billing/subscription',
        ...options
    });
};

/**
 * List subscriptions
 * Lists subscriptions for the primary organization. Filter by status and limit results.
 */
export const listSubscriptions = <ThrowOnError extends boolean = false>(options?: Options<ListSubscriptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSubscriptionsResponses, unknown, ThrowOnError>({
        url: '/api/v1/billing/subscriptions',
        ...options
    });
};

/**
 * Create subscription
 * Creates a subscription for the primary organization. Requires appropriate permissions.
 */
export const createSubscription = <ThrowOnError extends boolean = false>(options: Options<CreateSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSubscriptionResponses, unknown, ThrowOnError>({
        url: '/api/v1/billing/subscriptions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Change subscription
 * Updates subscription quantity and/or price. Proration behavior can be specified.
 */
export const changeSubscription = <ThrowOnError extends boolean = false>(options: Options<ChangeSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChangeSubscriptionResponses, unknown, ThrowOnError>({
        url: '/api/v1/billing/subscriptions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Cancel subscription
 * Cancels a subscription immediately or schedules cancellation at period end.
 */
export const cancelSubscription = <ThrowOnError extends boolean = false>(options: Options<CancelSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CancelSubscriptionResponses, unknown, ThrowOnError>({
        url: '/api/v1/billing/subscriptions/{id}/cancel',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Resume subscription
 * Resumes a subscription that was scheduled to be canceled at period end.
 */
export const resumeSubscription = <ThrowOnError extends boolean = false>(options: Options<ResumeSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResumeSubscriptionResponses, unknown, ThrowOnError>({
        url: '/api/v1/billing/subscriptions/{id}/resume',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Paddle webhook endpoint
 * Validates Paddle signature and processes billing events. This endpoint is intended to be called by Paddle.
 */
export const paddleWebhook = <ThrowOnError extends boolean = false>(options?: Options<PaddleWebhookData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PaddleWebhookResponses, PaddleWebhookErrors, ThrowOnError>({
        url: '/api/v1/billing/webhook',
        ...options
    });
};

/**
 * Identify client user
 * Identify or create a client-side user by email or anonymous ID in a given org domain.
 */
export const identifyUser = <ThrowOnError extends boolean = false>(options: Options<IdentifyUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IdentifyUserResponses, IdentifyUserErrors, ThrowOnError>({
        url: '/api/v1/client/identify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Submit client message
 * Submit a message from the client widget; creates a ticket and initial message.
 */
export const sendMessage = <ThrowOnError extends boolean = false>(options: Options<SendMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendMessageResponses, SendMessageErrors, ThrowOnError>({
        url: '/api/v1/client/message',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get ticket history (public)
 * Get event history for a ticket visible to client users in the specified org domain.
 */
export const getTicketHistoryPublic = <ThrowOnError extends boolean = false>(options: Options<GetTicketHistoryPublicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketHistoryPublicResponses, GetTicketHistoryPublicErrors, ThrowOnError>({
        url: '/api/v1/client/tickets/{ticket_id}/history',
        ...options
    });
};

/**
 * List client tickets
 * List tickets created by the given client user in the specified org domain.
 */
export const getUserTickets = <ThrowOnError extends boolean = false>(options: Options<GetUserTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserTicketsResponses, GetUserTicketsErrors, ThrowOnError>({
        url: '/api/v1/client/tickets/{user_id}',
        ...options
    });
};

/**
 * List organizations
 * List organizations for the current user.
 */
export const getUserOrganizations = <ThrowOnError extends boolean = false>(options?: Options<GetUserOrganizationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserOrganizationsResponses, GetUserOrganizationsErrors, ThrowOnError>({
        url: '/api/v1/organizations',
        ...options
    });
};

/**
 * Create organization
 * Create a new organization and assign the creator as Admin.
 */
export const createOrganization = <ThrowOnError extends boolean = false>(options: Options<CreateOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrganizationResponses, CreateOrganizationErrors, ThrowOnError>({
        url: '/api/v1/organizations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Find orgs by email domain
 * Find organizations that match the domain of an email address.
 */
export const findOrganizationsByEmailDomain = <ThrowOnError extends boolean = false>(options: Options<FindOrganizationsByEmailDomainData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindOrganizationsByEmailDomainResponses, FindOrganizationsByEmailDomainErrors, ThrowOnError>({
        url: '/api/v1/organizations/by-domain',
        ...options
    });
};

/**
 * Join organization by domain
 * Join an organization if email domain matches and setting allows.
 */
export const joinOrganization = <ThrowOnError extends boolean = false>(options: Options<JoinOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<JoinOrganizationResponses, JoinOrganizationErrors, ThrowOnError>({
        url: '/api/v1/organizations/join',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get organization
 * Get organization details by ID.
 */
export const getOrganization = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationResponses, GetOrganizationErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}',
        ...options
    });
};

/**
 * Accept invitation
 * Accept a pending organization invitation.
 */
export const acceptInvitation = <ThrowOnError extends boolean = false>(options: Options<AcceptInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AcceptInvitationResponses, AcceptInvitationErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/accept-invitation',
        ...options
    });
};

export const listEvents = <ThrowOnError extends boolean = false>(options: Options<ListEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListEventsResponses, ListEventsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/events',
        ...options
    });
};

/**
 * Create audit event
 * Creates a custom event in the audit trail.
 */
export const createEvent = <ThrowOnError extends boolean = false>(options: Options<CreateEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEventResponses, CreateEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const exportEvents = <ThrowOnError extends boolean = false>(options: Options<ExportEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExportEventsResponses, ExportEventsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/events/export',
        ...options
    });
};

export const getEventStats = <ThrowOnError extends boolean = false>(options: Options<GetEventStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventStatsResponses, GetEventStatsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/events/stats',
        ...options
    });
};

export const streamEvents = <ThrowOnError extends boolean = false>(options: Options<StreamEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StreamEventsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/events/stream',
        ...options
    });
};

/**
 * WebSocket events stream
 * Upgrades to WebSocket for realtime org events.
 *
 * Auth: This endpoint does not use bearerAuth; authenticate in-band by sending {op:'auth', token} with the short-lived JWT obtained from /events/ws/init.
 *
 * Usage:
 *
 * 1) Connect WS to this endpoint.
 * 2) Server hello: {"op":"hello","conn_id":"...","heartbeat_ms":30000,"max_backlog":500}.
 * 3) Send auth: {"op":"auth","token":"<jwt>"}.
 * 4) On {"op":"authok"}, subscribe to topics and receive events.
 * 5) Before expiry you'll receive {"op":"authexpiring"}; fetch a new token from /events/ws/init and send a new auth without reconnecting.
 *
 * Client envelopes (JSON): subscribe/unsubscribe/resume/ping as documented above.
 * Server envelopes (JSON): hello/event/pong/error/authok/authexpiring.
 */
export const wsEvents = <ThrowOnError extends boolean = false>(options: Options<WsEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/events/ws',
        ...options
    });
};

/**
 * Get WebSocket URL and token
 * Returns a ws(s) URL and a short-lived JWT for establishing the WS connection. The server will send an `error` event with code `TOKEN_EXPIRING` ~60s before expiry to prompt re-auth.
 */
export const wsAuth = <ThrowOnError extends boolean = false>(options: Options<WsAuthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WsAuthResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/events/ws/auth',
        ...options
    });
};

export const getEvent = <ThrowOnError extends boolean = false>(options: Options<GetEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEventResponses, GetEventErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/events/{event_id}',
        ...options
    });
};

/**
 * Invite user
 * Invite a user to join the organization.
 */
export const inviteUser = <ThrowOnError extends boolean = false>(options: Options<InviteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InviteUserResponses, InviteUserErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/invite',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List members
 * List organization members and their statuses.
 */
export const getMembers = <ThrowOnError extends boolean = false>(options: Options<GetMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMembersResponses, GetMembersErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/members',
        ...options
    });
};

/**
 * Remove member
 * Remove a member from the organization.
 */
export const removeMember = <ThrowOnError extends boolean = false>(options: Options<RemoveMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveMemberResponses, RemoveMemberErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/members/{member_id}',
        ...options
    });
};

/**
 * Update membership
 * Update membership status (active, invited, requested, suspended).
 */
export const updateMembership = <ThrowOnError extends boolean = false>(options: Options<UpdateMembershipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMembershipResponses, UpdateMembershipErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/members/{member_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteMessage = <ThrowOnError extends boolean = false>(options: Options<DeleteMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMessageResponses, DeleteMessageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/messages/{message_id}',
        ...options
    });
};

export const getMessage = <ThrowOnError extends boolean = false>(options: Options<GetMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessageResponses, GetMessageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/messages/{message_id}',
        ...options
    });
};

/**
 * Get effective permissions
 * Compute effective permission bitmask for the current user in the organization.
 */
export const getEffectivePermissions = <ThrowOnError extends boolean = false>(options: Options<GetEffectivePermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEffectivePermissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/permissions/effective',
        ...options
    });
};

/**
 * List online agents
 * List agents with recent presence heartbeats and their current ticket context.
 */
export const listAgents = <ThrowOnError extends boolean = false>(options: Options<ListAgentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAgentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/presence/agents',
        ...options
    });
};

/**
 * Send agent presence heartbeat
 * Send a presence heartbeat to update agent status and current/editing ticket context.
 */
export const heartbeat = <ThrowOnError extends boolean = false>(options: Options<HeartbeatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<HeartbeatResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/presence/heartbeat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List roles
 * List roles for the organization ordered by position.
 */
export const listRoles = <ThrowOnError extends boolean = false>(options: Options<ListRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRolesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/roles',
        ...options
    });
};

/**
 * Create role
 * Create a new role with a permission bitmask and display settings.
 */
export const createRole = <ThrowOnError extends boolean = false>(options: Options<CreateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete role
 * Delete a role by ID.
 */
export const deleteRole = <ThrowOnError extends boolean = false>(options: Options<DeleteRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/roles/{role_id}',
        ...options
    });
};

/**
 * Get role
 * Retrieve a role by ID.
 */
export const getRole = <ThrowOnError extends boolean = false>(options: Options<GetRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/roles/{role_id}',
        ...options
    });
};

/**
 * Update role
 * Update role fields like name, color, position, and permissions.
 */
export const updateRole = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/roles/{role_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Assign role
 * Assign a role to a user.
 */
export const assignRole = <ThrowOnError extends boolean = false>(options: Options<AssignRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/roles/{role_id}/assign',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Revoke role
 * Revoke a role from a user.
 */
export const revokeRole = <ThrowOnError extends boolean = false>(options: Options<RevokeRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RevokeRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/roles/{role_id}/revoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List settings
 * List all organization settings.
 */
export const getAllOrganizationSettings = <ThrowOnError extends boolean = false>(options: Options<GetAllOrganizationSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllOrganizationSettingsResponses, GetAllOrganizationSettingsErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/settings',
        ...options
    });
};

/**
 * Set organization setting
 * Create or update an organization setting.
 */
export const setOrganizationSetting = <ThrowOnError extends boolean = false>(options: Options<SetOrganizationSettingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetOrganizationSettingResponses, SetOrganizationSettingErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Apply data retention
 * Run data retention worker once for the organization.
 */
export const applyDataRetention = <ThrowOnError extends boolean = false>(options: Options<ApplyDataRetentionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApplyDataRetentionResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/settings/apply-retention',
        ...options
    });
};

/**
 * Effective org settings
 * Get effective organization settings (defaults plus overrides).
 */
export const getOrgEffectiveSettings = <ThrowOnError extends boolean = false>(options: Options<GetOrgEffectiveSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrgEffectiveSettingsResponses, GetOrgEffectiveSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/settings/effective',
        ...options
    });
};

/**
 * Delete setting
 * Delete an organization setting.
 */
export const deleteOrganizationSetting = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationSettingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrganizationSettingResponses, DeleteOrganizationSettingErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/settings/{key}',
        ...options
    });
};

/**
 * Get setting
 * Get a single organization setting value.
 */
export const getOrganizationSetting = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationSettingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrganizationSettingResponses, GetOrganizationSettingErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/settings/{key}',
        ...options
    });
};

/**
 * Check SLA breaches
 * Evaluate tickets against SLA policies and mark breaches.
 */
export const checkBreaches = <ThrowOnError extends boolean = false>(options: Options<CheckBreachesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CheckBreachesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/sla/check-breaches',
        ...options
    });
};

/**
 * SLA countdown stream
 * Server-Sent Events (SSE) stream of remaining time for first response and resolution.
 */
export const countdownSse = <ThrowOnError extends boolean = false>(options: Options<CountdownSseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CountdownSseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/sla/countdown',
        ...options
    });
};

/**
 * List SLA policies
 * List SLA policies for an organization.
 */
export const listPolicies = <ThrowOnError extends boolean = false>(options: Options<ListPoliciesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPoliciesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/sla/policies',
        ...options
    });
};

/**
 * Create SLA policy
 * Create an SLA policy with conditions and targets.
 */
export const createPolicy = <ThrowOnError extends boolean = false>(options: Options<CreatePolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePolicyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/sla/policies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update SLA policy
 * Update SLA policy fields such as targets or activation.
 */
export const updatePolicy = <ThrowOnError extends boolean = false>(options: Options<UpdatePolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePolicyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/sla/policies/{policy_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Apply sync operations (tickets)
 * Batch apply sync operations with optimistic concurrency. Currently supports entity=ticket with upsert of core fields.
 */
export const syncOps = <ThrowOnError extends boolean = false>(options: Options<SyncOpsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SyncOpsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/sync/ops',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Sync snapshot
 * Returns a compact snapshot for requested types and the current head sequence.
 */
export const syncSnapshot = <ThrowOnError extends boolean = false>(options: Options<SyncSnapshotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SyncSnapshotResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/sync/snapshot',
        ...options
    });
};

/**
 * List tags
 * List tags for the organization with pagination.
 */
export const listTags = <ThrowOnError extends boolean = false>(options: Options<ListTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTagsResponses, ListTagsErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/tags',
        ...options
    });
};

/**
 * Create a tag
 * Create a new tag within the organization. Requires MANAGE_TAGS.
 */
export const createTag = <ThrowOnError extends boolean = false>(options: Options<CreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTagResponses, CreateTagErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Popular tags
 * List the most-used tags in the organization.
 */
export const getPopularTags = <ThrowOnError extends boolean = false>(options: Options<GetPopularTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPopularTagsResponses, GetPopularTagsErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/tags/popular',
        ...options
    });
};

/**
 * Delete a tag
 * Delete a tag and remove its associations. Requires MANAGE_TAGS.
 */
export const deleteTag = <ThrowOnError extends boolean = false>(options: Options<DeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagResponses, DeleteTagErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/tags/{tag_id}',
        ...options
    });
};

/**
 * Get a tag
 * Retrieve a tag by ID including computed ticket count.
 */
export const getTag = <ThrowOnError extends boolean = false>(options: Options<GetTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagResponses, GetTagErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/tags/{tag_id}',
        ...options
    });
};

/**
 * Update a tag
 * Update tag name or color. Requires MANAGE_TAGS.
 */
export const updateTag = <ThrowOnError extends boolean = false>(options: Options<UpdateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTagResponses, UpdateTagErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/tags/{tag_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get tag with tickets
 * Get a tag and a paginated list of associated tickets.
 */
export const getTagWithTickets = <ThrowOnError extends boolean = false>(options: Options<GetTagWithTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagWithTicketsResponses, GetTagWithTicketsErrors, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/tags/{tag_id}/tickets',
        ...options
    });
};

/**
 * List teams
 * List teams in the organization.
 */
export const listTeams = <ThrowOnError extends boolean = false>(options: Options<ListTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTeamsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/teams',
        ...options
    });
};

/**
 * Create team
 * Create a team within the organization.
 */
export const createTeam = <ThrowOnError extends boolean = false>(options: Options<CreateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update team
 * Update team name and description.
 */
export const updateTeam = <ThrowOnError extends boolean = false>(options: Options<UpdateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTeamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/teams/{team_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List team members
 * List members in a team.
 */
export const listMembers = <ThrowOnError extends boolean = false>(options: Options<ListMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMembersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/teams/{team_id}/members',
        ...options
    });
};

/**
 * Add team member
 * Add a user to a team with a role.
 */
export const addMember = <ThrowOnError extends boolean = false>(options: Options<AddMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddMemberResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/teams/{team_id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove team member
 * Remove a user from a team.
 */
export const removeMember2 = <ThrowOnError extends boolean = false>(options: Options<RemoveMember2Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveMember2Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/teams/{team_id}/members/{member_user_id}',
        ...options
    });
};

/**
 * List tickets with filtering
 * Retrieves a paginated list of tickets with optional filtering by status, priority, assignment, creator, and tags. Results are ordered by creation date (newest first).
 */
export const listTickets = <ThrowOnError extends boolean = false>(options: Options<ListTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTicketsResponses, ListTicketsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets',
        ...options
    });
};

/**
 * Create a new support ticket
 * Creates a new support ticket in the specified organization. The ticket will be assigned to the authenticated user as the creator and can optionally be assigned to another team member.
 */
export const createTicket = <ThrowOnError extends boolean = false>(options: Options<CreateTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTicketResponses, CreateTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Bulk update tickets
 */
export const bulkUpdateTickets = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BulkUpdateTicketsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Merge two tickets
 */
export const mergeTickets = <ThrowOnError extends boolean = false>(options: Options<MergeTicketsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MergeTicketsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/merge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Split a ticket's selected messages into a new ticket
 */
export const splitTicket = <ThrowOnError extends boolean = false>(options: Options<SplitTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SplitTicketResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/split',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List saved views
 */
export const listSavedViews = <ThrowOnError extends boolean = false>(options: Options<ListSavedViewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSavedViewsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/views',
        ...options
    });
};

/**
 * Create a saved view
 */
export const createSavedView = <ThrowOnError extends boolean = false>(options: Options<CreateSavedViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSavedViewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/views',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteTicket = <ThrowOnError extends boolean = false>(options: Options<DeleteTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTicketResponses, DeleteTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}',
        ...options
    });
};

/**
 * Get ticket details
 * Retrieves detailed information about a specific ticket including its current status, assignment, tags, and metadata.
 */
export const getTicket = <ThrowOnError extends boolean = false>(options: Options<GetTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketResponses, GetTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}',
        ...options
    });
};

export const updateTicket = <ThrowOnError extends boolean = false>(options: Options<UpdateTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTicketResponses, UpdateTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const assignTicketTeam = <ThrowOnError extends boolean = false>(options: Options<AssignTicketTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignTicketTeamResponses, AssignTicketTeamErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/assign-team',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const clearTicketTeamAssignment = <ThrowOnError extends boolean = false>(options: Options<ClearTicketTeamAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ClearTicketTeamAssignmentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/assigned-team',
        ...options
    });
};

export const getTicketTeamAssignment = <ThrowOnError extends boolean = false>(options: Options<GetTicketTeamAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketTeamAssignmentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/assigned-team',
        ...options
    });
};

/**
 * Delete current user's draft for a ticket
 */
export const deleteDraft = <ThrowOnError extends boolean = false>(options: Options<DeleteDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDraftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/draft',
        ...options
    });
};

/**
 * Get current user's draft for a ticket
 */
export const getDraft = <ThrowOnError extends boolean = false>(options: Options<GetDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDraftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/draft',
        ...options
    });
};

/**
 * Create or update a draft for a ticket
 */
export const upsertDraft = <ThrowOnError extends boolean = false>(options: Options<UpsertDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpsertDraftResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/draft',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get ticket history
 * Requires permission: VIEW_ALL_TICKETS
 */
export const getTicketHistory = <ThrowOnError extends boolean = false>(options: Options<GetTicketHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTicketHistoryResponses, GetTicketHistoryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/history',
        ...options
    });
};

export const releaseTicketLock = <ThrowOnError extends boolean = false>(options: Options<ReleaseTicketLockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ReleaseTicketLockResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/lock',
        ...options
    });
};

export const lockTicket = <ThrowOnError extends boolean = false>(options: Options<LockTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LockTicketResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/lock',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const takeoverTicketLock = <ThrowOnError extends boolean = false>(options: Options<TakeoverTicketLockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TakeoverTicketLockResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/lock/takeover',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listTicketMessages = <ThrowOnError extends boolean = false>(options: Options<ListTicketMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTicketMessagesResponses, ListTicketMessagesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages',
        ...options
    });
};

/**
 * Create a message on a ticket.
 */
export const createMessage = <ThrowOnError extends boolean = false>(options: Options<CreateMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMessageResponses, CreateMessageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getMessageCount = <ThrowOnError extends boolean = false>(options: Options<GetMessageCountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMessageCountResponses, GetMessageCountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/count',
        ...options
    });
};

export const createInternalNote = <ThrowOnError extends boolean = false>(options: Options<CreateInternalNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateInternalNoteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/internal',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getLatestMessage = <ThrowOnError extends boolean = false>(options: Options<GetLatestMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLatestMessageResponses, GetLatestMessageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/latest',
        ...options
    });
};

export const searchMessages = <ThrowOnError extends boolean = false>(options: Options<SearchMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchMessagesResponses, SearchMessagesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/search',
        ...options
    });
};

export const listMessageAttachments = <ThrowOnError extends boolean = false>(options: Options<ListMessageAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMessageAttachmentsResponses, ListMessageAttachmentsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments',
        ...options
    });
};

export const uploadAttachments = <ThrowOnError extends boolean = false>(options: Options<UploadAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadAttachmentsResponses, UploadAttachmentsErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const deleteAttachment = <ThrowOnError extends boolean = false>(options: Options<DeleteAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAttachmentResponses, DeleteAttachmentErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/messages/{message_id}/attachments/{attachment_id}',
        ...options
    });
};

export const removeTagsFromTicket = <ThrowOnError extends boolean = false>(options: Options<RemoveTagsFromTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveTagsFromTicketResponses, RemoveTagsFromTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const addTagsToTicket = <ThrowOnError extends boolean = false>(options: Options<AddTagsToTicketData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddTagsToTicketResponses, AddTagsToTicketErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List users typing on a ticket
 * List user IDs of agents currently typing on the specified ticket.
 */
export const listTyping = <ThrowOnError extends boolean = false>(options: Options<ListTypingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTypingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/typing',
        ...options
    });
};

/**
 * Set typing indicator
 * Set or clear the caller's typing state for a specific ticket.
 */
export const typingUpdate = <ThrowOnError extends boolean = false>(options: Options<TypingUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TypingUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/typing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const listTicketWatchers = <ThrowOnError extends boolean = false>(options: Options<ListTicketWatchersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTicketWatchersResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/watchers',
        ...options
    });
};

export const addTicketWatcher = <ThrowOnError extends boolean = false>(options: Options<AddTicketWatcherData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddTicketWatcherResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/watchers',
        ...options
    });
};

export const removeTicketWatcher = <ThrowOnError extends boolean = false>(options: Options<RemoveTicketWatcherData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveTicketWatcherResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/tickets/{ticket_id}/watchers/{user_id}',
        ...options
    });
};

/**
 * List user custom fields
 * List all defined user custom fields for the organization.
 */
export const listCustomFields = <ThrowOnError extends boolean = false>(options: Options<ListCustomFieldsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCustomFieldsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/users/custom-fields',
        ...options
    });
};

/**
 * Create a user custom field
 * Define a per-organization custom field for users (e.g., plan, region).
 */
export const createCustomField = <ThrowOnError extends boolean = false>(options: Options<CreateCustomFieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCustomFieldResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/users/custom-fields',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a user custom field
 * Remove a custom field definition and all associated values.
 */
export const deleteCustomField = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomFieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCustomFieldResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/users/custom-fields/{field_id}',
        ...options
    });
};

/**
 * List user segments
 * List all segments defined for the organization.
 */
export const listSegments = <ThrowOnError extends boolean = false>(options: Options<ListSegmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSegmentsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/users/segments',
        ...options
    });
};

/**
 * Create a user segment
 * Create a segment of users based on custom field rules.
 */
export const createSegment = <ThrowOnError extends boolean = false>(options: Options<CreateSegmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSegmentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/users/segments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a user segment
 * Remove a user segment.
 */
export const deleteSegment = <ThrowOnError extends boolean = false>(options: Options<DeleteSegmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSegmentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/users/segments/{segment_id}',
        ...options
    });
};

/**
 * Update a user segment
 * Update a segment's name and/or rules.
 */
export const updateSegment = <ThrowOnError extends boolean = false>(options: Options<UpdateSegmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSegmentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/users/segments/{segment_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Evaluate a user segment
 * Evaluate and return the list of user IDs matching the segment rules.
 */
export const evaluateSegment = <ThrowOnError extends boolean = false>(options: Options<EvaluateSegmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EvaluateSegmentResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/users/segments/{segment_id}/evaluate',
        ...options
    });
};

/**
 * Get a user's custom field values
 * Retrieve the custom field values for a specific user in the organization.
 */
export const getUserCustomFields = <ThrowOnError extends boolean = false>(options: Options<GetUserCustomFieldsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserCustomFieldsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/users/{user_id}/custom-fields',
        ...options
    });
};

/**
 * Set a user's custom field values
 * Create or update custom field values for a specific user.
 */
export const setUserCustomFields = <ThrowOnError extends boolean = false>(options: Options<SetUserCustomFieldsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetUserCustomFieldsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/users/{user_id}/custom-fields',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List webhooks
 * List webhooks for the organization with optional filters.
 */
export const listWebhooks = <ThrowOnError extends boolean = false>(options: Options<ListWebhooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListWebhooksResponses, ListWebhooksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/webhooks',
        ...options
    });
};

/**
 * Create webhook
 * Create a webhook endpoint subscribed to specific events.
 */
export const createWebhook = <ThrowOnError extends boolean = false>(options: Options<CreateWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWebhookResponses, CreateWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/webhooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List supported webhook events
 * Get the list of event types that webhooks can subscribe to.
 */
export const listWebhookEvents = <ThrowOnError extends boolean = false>(options: Options<ListWebhookEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListWebhookEventsResponses, unknown, ThrowOnError>({
        url: '/api/v1/organizations/{org_id}/webhooks/events',
        ...options
    });
};

/**
 * Send webhooks for event
 * Trigger subscribed webhooks for the specified event with optional context.
 */
export const sendWebhooks = <ThrowOnError extends boolean = false>(options: Options<SendWebhooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendWebhooksResponses, SendWebhooksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/webhooks/send',
        ...options
    });
};

/**
 * Get webhook statistics
 * Retrieve aggregated statistics for webhooks in the organization.
 */
export const getWebhookStats = <ThrowOnError extends boolean = false>(options: Options<GetWebhookStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWebhookStatsResponses, GetWebhookStatsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/webhooks/stats',
        ...options
    });
};

/**
 * Delete webhook
 * Delete a webhook by ID.
 */
export const deleteWebhook = <ThrowOnError extends boolean = false>(options: Options<DeleteWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWebhookResponses, DeleteWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/webhooks/{webhook_id}',
        ...options
    });
};

/**
 * Get webhook
 * Retrieve a webhook by ID.
 */
export const getWebhook = <ThrowOnError extends boolean = false>(options: Options<GetWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWebhookResponses, GetWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/webhooks/{webhook_id}',
        ...options
    });
};

/**
 * Update webhook
 * Update webhook configuration.
 */
export const updateWebhook = <ThrowOnError extends boolean = false>(options: Options<UpdateWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateWebhookResponses, UpdateWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/webhooks/{webhook_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Test webhook
 * Send a test event to the webhook and return the delivery result.
 */
export const testWebhook = <ThrowOnError extends boolean = false>(options: Options<TestWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestWebhookResponses, TestWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/organizations/{org_id}/webhooks/{webhook_id}/test',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get permissions catalog
 * List permission keys and their bitmask values.
 */
export const getPermissionsCatalog = <ThrowOnError extends boolean = false>(options?: Options<GetPermissionsCatalogData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPermissionsCatalogResponses, unknown, ThrowOnError>({
        url: '/api/v1/permissions/catalog',
        ...options
    });
};

/**
 * List sessions
 * List active sessions for the authenticated user.
 */
export const listSessions = <ThrowOnError extends boolean = false>(options?: Options<ListSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSessionsResponses, ListSessionsErrors, ThrowOnError>({
        url: '/api/v1/sessions',
        ...options
    });
};

/**
 * Cleanup expired sessions
 * Delete expired sessions for all users.
 */
export const cleanupExpiredSessions = <ThrowOnError extends boolean = false>(options?: Options<CleanupExpiredSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CleanupExpiredSessionsResponses, CleanupExpiredSessionsErrors, ThrowOnError>({
        url: '/api/v1/sessions/cleanup',
        ...options
    });
};

/**
 * Revoke all sessions
 * Revoke all sessions for the user, optionally keeping current session.
 */
export const revokeAllSessions = <ThrowOnError extends boolean = false>(options: Options<RevokeAllSessionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RevokeAllSessionsResponses, RevokeAllSessionsErrors, ThrowOnError>({
        url: '/api/v1/sessions/revoke-all',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get session stats
 * Retrieve total, active, and expired session counts.
 */
export const getSessionStats = <ThrowOnError extends boolean = false>(options?: Options<GetSessionStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSessionStatsResponses, GetSessionStatsErrors, ThrowOnError>({
        url: '/api/v1/sessions/stats',
        ...options
    });
};

/**
 * Revoke session
 * Revoke a specific session.
 */
export const revokeSession = <ThrowOnError extends boolean = false>(options: Options<RevokeSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RevokeSessionResponses, RevokeSessionErrors, ThrowOnError>({
        url: '/api/v1/sessions/{session_id}',
        ...options
    });
};

/**
 * Get session
 * Retrieve details for a specific session.
 */
export const getSession = <ThrowOnError extends boolean = false>(options: Options<GetSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionResponses, GetSessionErrors, ThrowOnError>({
        url: '/api/v1/sessions/{session_id}',
        ...options
    });
};

/**
 * Extend session
 * Extend the expiration of a specific session.
 */
export const extendSession = <ThrowOnError extends boolean = false>(options: Options<ExtendSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExtendSessionResponses, ExtendSessionErrors, ThrowOnError>({
        url: '/api/v1/sessions/{session_id}/extend',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Settings catalog
 * Retrieve available settings definitions and defaults.
 */
export const getSettingsCatalog = <ThrowOnError extends boolean = false>(options?: Options<GetSettingsCatalogData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSettingsCatalogResponses, unknown, ThrowOnError>({
        url: '/api/v1/settings/catalog',
        ...options
    });
};

/**
 * Delete current user's account
 * Permanently delete the authenticated user's account after validation checks.
 */
export const deleteAccount = <ThrowOnError extends boolean = false>(options?: Options<DeleteAccountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteAccountResponses, DeleteAccountErrors, ThrowOnError>({
        url: '/api/v1/users/account',
        ...options
    });
};

export const listApiKeys = <ThrowOnError extends boolean = false>(options?: Options<ListApiKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListApiKeysResponses, ListApiKeysErrors, ThrowOnError>({
        url: '/api/v1/users/api-keys',
        ...options
    });
};

export const createApiKey = <ThrowOnError extends boolean = false>(options: Options<CreateApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateApiKeyResponses, CreateApiKeyErrors, ThrowOnError>({
        url: '/api/v1/users/api-keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiKey = <ThrowOnError extends boolean = false>(options: Options<DeleteApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiKeyResponses, DeleteApiKeyErrors, ThrowOnError>({
        url: '/api/v1/users/api-keys/{key_id}',
        ...options
    });
};

export const getApiKey = <ThrowOnError extends boolean = false>(options: Options<GetApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiKeyResponses, GetApiKeyErrors, ThrowOnError>({
        url: '/api/v1/users/api-keys/{key_id}',
        ...options
    });
};

export const revokeApiKey = <ThrowOnError extends boolean = false>(options: Options<RevokeApiKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RevokeApiKeyResponses, RevokeApiKeyErrors, ThrowOnError>({
        url: '/api/v1/users/api-keys/{key_id}/revoke',
        ...options
    });
};

/**
 * List recent login attempts
 * Retrieve recent login attempts for the authenticated user, including failures.
 */
export const getLoginAttempts = <ThrowOnError extends boolean = false>(options?: Options<GetLoginAttemptsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoginAttemptsResponses, GetLoginAttemptsErrors, ThrowOnError>({
        url: '/api/v1/users/login-attempts',
        ...options
    });
};

/**
 * List recent login history
 * Retrieve recent login history entries for the authenticated user.
 */
export const getLoginHistory = <ThrowOnError extends boolean = false>(options?: Options<GetLoginHistoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoginHistoryResponses, GetLoginHistoryErrors, ThrowOnError>({
        url: '/api/v1/users/login-history',
        ...options
    });
};

/**
 * Change current user's password
 * Change the authenticated user's password by providing the current and new password.
 */
export const changePassword = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChangePasswordResponses, ChangePasswordErrors, ThrowOnError>({
        url: '/api/v1/users/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get current user's profile
 * Fetch the authenticated user's profile, including org memberships and verification status.
 */
export const getProfile = <ThrowOnError extends boolean = false>(options?: Options<GetProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProfileResponses, GetProfileErrors, ThrowOnError>({
        url: '/api/v1/users/profile',
        ...options
    });
};

/**
 * Update current user's profile
 * Update the authenticated user's name and/or email. Triggers email verification if email changes.
 */
export const updateProfile = <ThrowOnError extends boolean = false>(options: Options<UpdateProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProfileResponses, UpdateProfileErrors, ThrowOnError>({
        url: '/api/v1/users/profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};